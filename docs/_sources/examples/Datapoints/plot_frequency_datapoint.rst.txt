
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Datapoints/plot_frequency_datapoint.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Datapoints_plot_frequency_datapoint.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Datapoints_plot_frequency_datapoint.py:


Frequency domain datapoint
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-14

There are two ways in which to create a frequency domain datapoint,

1) :ref:`Instantiating a frequency domain data point`

2) :ref:`Obtaining a datapoint from a dataset`

Once instantiated, see :ref:`Using a frequency domain datapoint`

.. GENERATED FROM PYTHON SOURCE LINES 16-29

.. code-block:: default

    from os.path import join
    import numpy as np
    import h5py
    import matplotlib.pyplot as plt
    from geobipy import hdfRead
    from geobipy import CircularLoop
    from geobipy import FdemSystem
    from geobipy import FdemData
    from geobipy import FdemDataPoint
    from geobipy import Model1D
    from geobipy import StatArray
    from geobipy import Distribution








.. GENERATED FROM PYTHON SOURCE LINES 30-38

Instantiating a frequency domain data point
+++++++++++++++++++++++++++++++++++++++++++

To instantiate a frequency domain datapoint we need to define some
characteristics of the acquisition system.

We need to define the frequencies in Hz of the transmitter,
and the geometery of the loops used for each frequency.

.. GENERATED FROM PYTHON SOURCE LINES 38-49

.. code-block:: default


    frequencies = np.asarray([380.0, 1776.0, 3345.0, 8171.0, 41020.0, 129550.0])

    transmitterLoops = [CircularLoop(orient='z'),     CircularLoop(orient='z'),
                        CircularLoop('x', moment=-1), CircularLoop(orient='z'),
                        CircularLoop(orient='z'),     CircularLoop(orient='z')]

    receiverLoops    = [CircularLoop(orient='z', x=7.93),    CircularLoop(orient='z', x=7.91),
                        CircularLoop('x', moment=1, x=9.03), CircularLoop(orient='z', x=7.91),
                        CircularLoop(orient='z', x=7.91),    CircularLoop(orient='z', x=7.89)]








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Now we can instantiate the system.

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: default

    fds = FdemSystem(frequencies, transmitterLoops, receiverLoops)








.. GENERATED FROM PYTHON SOURCE LINES 54-61

And use the system to instantiate a datapoint

Note the extra arguments that can be used to create the data point.
data is for any observed data one might have, while std are the estimated standard
deviations of those observed data.

Define some in-phase then quadrature data for each frequency.

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default

    data = np.r_[145.3, 435.8, 260.6, 875.1, 1502.7, 1516.9,
                 217.9, 412.5, 178.7, 516.5, 405.7, 255.7]

    fdp = FdemDataPoint(x=0.0, y=0.0, z=30.0, elevation=0.0,
                        data=data, std=None, predictedData=None,
                        system=fds, lineNumber=0.0, fiducial=0.0)








.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default

    plt.figure()
    _ = fdp.plot()




.. image:: /examples/Datapoints/images/sphx_glr_plot_frequency_datapoint_001.png
    :alt: Frequency Domain EM Data
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-80

Obtaining a datapoint from a dataset
++++++++++++++++++++++++++++++++++++

More often than not, our observed data is stored in a file on disk.
We can read in a dataset and pull datapoints from it.

For more information about the frequency domain data set see :ref:`Frequency domain dataset`

.. GENERATED FROM PYTHON SOURCE LINES 82-83

Set some paths and file names

.. GENERATED FROM PYTHON SOURCE LINES 83-89

.. code-block:: default

    dataFolder = "..//supplementary//Data//"
    # The data file name
    dataFile = dataFolder + 'Resolve2.txt'
    # The EM system file name
    systemFile = dataFolder + 'FdemSystem2.stm'








.. GENERATED FROM PYTHON SOURCE LINES 90-91

Initialize and read an EM data set

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: default

    D = FdemData.read_csv(dataFile,systemFile)








.. GENERATED FROM PYTHON SOURCE LINES 94-95

Get a data point from the dataset

.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: default

    fdp = D.datapoint(0)
    plt.figure()
    _ = fdp.plot()




.. image:: /examples/Datapoints/images/sphx_glr_plot_frequency_datapoint_002.png
    :alt: Frequency Domain EM Data
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-102

Using a datapoint
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 104-105

We can define a 1D layered earth model, and use it to predict some data

.. GENERATED FROM PYTHON SOURCE LINES 105-111

.. code-block:: default

    nCells = 19
    par = StatArray(np.linspace(0.01, 0.1, nCells), "Conductivity", "$\frac{S}{m}$")
    thk = StatArray(np.ones(nCells) * 10.0)
    thk[-1] = np.inf
    mod = Model1D(nCells = nCells, parameters=par, widths=thk)








.. GENERATED FROM PYTHON SOURCE LINES 112-113

Forward model the data

.. GENERATED FROM PYTHON SOURCE LINES 113-115

.. code-block:: default

    fdp.forward(mod)








.. GENERATED FROM PYTHON SOURCE LINES 116-123

.. code-block:: default

    plt.figure()
    plt.subplot(121)
    _ = mod.pcolor()
    plt.subplot(122)
    _ = fdp.plot_predicted()
    plt.tight_layout()




.. image:: /examples/Datapoints/images/sphx_glr_plot_frequency_datapoint_003.png
    :alt: Frequency Domain EM Data
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-125

Compute the sensitivity matrix for a given model

.. GENERATED FROM PYTHON SOURCE LINES 125-129

.. code-block:: default

    J = fdp.sensitivity(mod)
    plt.figure()
    _ = np.abs(J).pcolor(equalize=True, log=10, flipY=True)




.. image:: /examples/Datapoints/images/sphx_glr_plot_frequency_datapoint_004.png
    :alt: plot frequency datapoint
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 130-134

Attaching statistical descriptors to the datapoint
++++++++++++++++++++++++++++++++++++++++++++++++++

Define a multivariate log normal distribution as the prior on the predicted data.

.. GENERATED FROM PYTHON SOURCE LINES 134-136

.. code-block:: default

    fdp.predictedData.set_prior('MvLogNormal', fdp.data[fdp.active], fdp.std[fdp.active]**2.0)








.. GENERATED FROM PYTHON SOURCE LINES 137-138

This allows us to evaluate the likelihood of the predicted data

.. GENERATED FROM PYTHON SOURCE LINES 138-142

.. code-block:: default

    print(fdp.likelihood(log=True))
    # Or the misfit
    print(fdp.dataMisfit())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -315.6678340389206
    22.796936903693204




.. GENERATED FROM PYTHON SOURCE LINES 143-144

We can perform a quick search for the best fitting half space

.. GENERATED FROM PYTHON SOURCE LINES 144-150

.. code-block:: default

    halfspace = fdp.FindBestHalfSpace()
    print('Best half space conductivity is {} $S/m$'.format(halfspace.par))
    plt.figure()
    _ = fdp.plot()
    _ = fdp.plot_predicted()




.. image:: /examples/Datapoints/images/sphx_glr_plot_frequency_datapoint_005.png
    :alt: Frequency Domain EM Data
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Best half space conductivity is [0.00982172] $S/m$




.. GENERATED FROM PYTHON SOURCE LINES 151-152

Compute the misfit between observed and predicted data

.. GENERATED FROM PYTHON SOURCE LINES 152-159

.. code-block:: default

    print(fdp.dataMisfit())


    # Set values of relative and additive error for both systems.
    fdp.relErr = 0.05
    fdp.addErr = 10.0





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    26.171569657135414




.. GENERATED FROM PYTHON SOURCE LINES 160-161

Plot the misfits for a range of half space conductivities

.. GENERATED FROM PYTHON SOURCE LINES 161-211

.. code-block:: default

    plt.figure()
    _ = fdp.plotHalfSpaceResponses(-6.0, 4.0, 200)

    plt.title("Halfspace responses");

    # ################################################################################
    # # We can attach priors to the height of the datapoint,
    # # the relative error multiplier, and the additive error noise floor


    # # Define the distributions used as priors.
    # heightPrior = Distribution('Uniform', min=np.float64(fdp.z) - 2.0, max=np.float64(fdp.z) + 2.0)
    # relativePrior = Distribution('Uniform', min=0.01, max=0.5)
    # additivePrior = Distribution('Uniform', min=5, max=15)
    # fdp.set_priors(height_prior=heightPrior, relative_error_prior=relativePrior, additive_error_prior=additivePrior)

    # ################################################################################
    # # In order to perturb our solvable parameters, we need to attach proposal distributions
    # heightProposal = Distribution('Normal', mean=fdp.z, variance = 0.01)
    # relativeProposal = Distribution('MvNormal', mean=fdp.relErr, variance=2.5e-7)
    # additiveProposal = Distribution('MvLogNormal', mean=fdp.addErr, variance=1e-4)
    # fdp.setProposals(heightProposal, relativeProposal, additiveProposal)

    # ################################################################################
    # # With priors set we can auto generate the posteriors
    # fdp.setPosteriors()

    # # Perturb the datapoint and record the perturbations
    # for i in range(10000):
    #     fdp.forward(mod)
    #     fdp.perturb(True, True, True, False)
    #     fdp.updatePosteriors()

    # ################################################################################
    # # Plot the posterior distributions
    # # fig = plt.figure()
    # # gs = fig.add_gridspec(nrows=1, ncols=1)
    # # ax = fdp.init_posterior_plots(gs[0, 0])
    # # fig.tight_layout()

    # # fdp.plot_posteriors(axes=ax, best=fdp)

    # import h5py
    # with h5py.File('fdp.h5', 'w') as f:
    #     fdp.toHdf(f, 'fdp', withPosterior=True)

    # with h5py.File('fdp.h5', 'r') as f:
    #     fdp1 = FdemDataPoint.fromHdf(f['fdp'])

    print('done')
    plt.show()


.. image:: /examples/Datapoints/images/sphx_glr_plot_frequency_datapoint_006.png
    :alt: Halfspace responses
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    done





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.218 seconds)


.. _sphx_glr_download_examples_Datapoints_plot_frequency_datapoint.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_frequency_datapoint.py <plot_frequency_datapoint.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_frequency_datapoint.ipynb <plot_frequency_datapoint.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
