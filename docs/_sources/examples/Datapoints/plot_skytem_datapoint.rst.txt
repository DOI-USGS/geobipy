
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Datapoints/plot_skytem_datapoint.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Datapoints_plot_skytem_datapoint.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Datapoints_plot_skytem_datapoint.py:


Skytem Datapoint Class
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-25

There are three ways in which to create a time domain datapoint

1) :ref:`Instantiating a time domain datapoint`

2) :ref:`Reading a datapoint from a file`

3) :ref:`Obtaining a datapoint from a dataset`

Once instantiated, see :ref:`Using a time domain datapoint`

Credits:
We would like to thank Ross Brodie at Geoscience Australia for his airborne time domain forward modeller
https://github.com/GeoscienceAustralia/ga-aem

For ground-based time domain data, we are using Dieter Werthmuller's python package Empymod
https://empymod.github.io/

Thanks to Dieter for his help getting Empymod ready for incorporation into GeoBIPy

.. GENERATED FROM PYTHON SOURCE LINES 27-44

.. code-block:: default

    from os.path import join
    import numpy as np
    import h5py
    import matplotlib.pyplot as plt
    from geobipy import Waveform
    from geobipy import SquareLoop, CircularLoop
    from geobipy import butterworth
    from geobipy import TdemSystem
    from geobipy import TdemData
    from geobipy import TdemDataPoint
    from geobipy import RectilinearMesh1D
    from geobipy import Model
    from geobipy import StatArray
    from geobipy import Distribution

    dataFolder = "..//supplementary//Data//"








.. GENERATED FROM PYTHON SOURCE LINES 45-51

Obtaining a datapoint from a dataset
++++++++++++++++++++++++++++++++++++
More often than not, our observed data is stored in a file on disk.
We can read in a dataset and pull datapoints from it.

For more information about the time domain data set, see :ref:`Time domain dataset`

.. GENERATED FROM PYTHON SOURCE LINES 51-57

.. code-block:: default


    # The data file name
    dataFile=dataFolder + 'skytem_saline_clay.csv'
    # The EM system file name
    systemFile=[dataFolder + 'SkytemHM-SLV.stm', dataFolder + 'SkytemLM-SLV.stm']








.. GENERATED FROM PYTHON SOURCE LINES 58-60

Initialize and read an EM data set
Prepare the dataset so that we can read a point at a time.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default

    Dataset = TdemData._initialize_sequential_reading(dataFile, systemFile)
    # Get a datapoint from the file.
    tdp = Dataset._read_record()

    Dataset._file.close()








.. GENERATED FROM PYTHON SOURCE LINES 67-69

Using a time domain datapoint
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 71-72

We can define a 1D layered earth model, and use it to predict some data

.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: default

    par = StatArray(np.r_[500.0, 20.0], "Conductivity", "$\frac{S}{m}$")
    mod = Model(RectilinearMesh1D(edges=np.r_[0, 75.0, np.inf]), values=par)








.. GENERATED FROM PYTHON SOURCE LINES 76-77

Forward model the data

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: default

    tdp.forward(mod)








.. GENERATED FROM PYTHON SOURCE LINES 80-88

.. code-block:: default

    plt.figure()
    plt.subplot(121)
    _ = mod.pcolor()
    plt.subplot(122)
    _ = tdp.plot()
    _ = tdp.plot_predicted()
    plt.tight_layout()




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_001.png
   :alt: Time Domain EM Data
   :srcset: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 89-93

.. code-block:: default

    plt.figure()
    tdp.plotDataResidual(yscale='log', xscale='log')
    plt.title('new')




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_002.png
   :alt: new
   :srcset: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'new')



.. GENERATED FROM PYTHON SOURCE LINES 94-95

Compute the sensitivity matrix for a given model

.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: default

    J = tdp.sensitivity(mod)
    plt.figure()
    _ = np.abs(J).pcolor(equalize=True, log=10, flipY=True)




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_003.png
   :alt: plot skytem datapoint
   :srcset: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-104

Attaching statistical descriptors to the datapoint
++++++++++++++++++++++++++++++++++++++++++++++++++

Set values of relative and additive error for both systems.

.. GENERATED FROM PYTHON SOURCE LINES 104-109

.. code-block:: default

    tdp.relative_error = np.r_[0.05, 0.05]
    tdp.additive_error = np.r_[1e-14, 1e-13]
    # Define a multivariate log normal distribution as the prior on the predicted data.
    tdp.predictedData.prior = Distribution('MvLogNormal', tdp.data[tdp.active], tdp.std[tdp.active]**2.0)








.. GENERATED FROM PYTHON SOURCE LINES 110-111

This allows us to evaluate the likelihood of the predicted data

.. GENERATED FROM PYTHON SOURCE LINES 111-115

.. code-block:: default

    print(tdp.likelihood(log=True))
    # Or the misfit
    print(tdp.dataMisfit())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -189787.1239057012
    381606.3047007519




.. GENERATED FROM PYTHON SOURCE LINES 116-117

Plot the misfits for a range of half space conductivities

.. GENERATED FROM PYTHON SOURCE LINES 117-121

.. code-block:: default

    plt.figure()
    _ = tdp.plotHalfSpaceResponses(-6.0, 4.0, 200)
    plt.title("Halfspace responses")




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_004.png
   :alt: Halfspace responses
   :srcset: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Halfspace responses')



.. GENERATED FROM PYTHON SOURCE LINES 122-123

We can perform a quick search for the best fitting half space

.. GENERATED FROM PYTHON SOURCE LINES 123-130

.. code-block:: default

    halfspace = tdp.find_best_halfspace()

    print('Best half space conductivity is {} $S/m$'.format(halfspace.values))
    plt.figure()
    _ = tdp.plot()
    _ = tdp.plot_predicted()




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_005.png
   :alt: Time Domain EM Data
   :srcset: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Best half space conductivity is [0.01047616] $S/m$




.. GENERATED FROM PYTHON SOURCE LINES 131-132

Compute the misfit between observed and predicted data

.. GENERATED FROM PYTHON SOURCE LINES 132-134

.. code-block:: default

    print(tdp.dataMisfit())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    11320.946425443677




.. GENERATED FROM PYTHON SOURCE LINES 135-137

We can attach priors to the height of the datapoint,
the relative error multiplier, and the additive error noise floor

.. GENERATED FROM PYTHON SOURCE LINES 137-144

.. code-block:: default


    # Define the distributions used as priors.
    z_prior = Distribution('Uniform', min=np.float64(tdp.z) - 2.0, max=np.float64(tdp.z) + 2.0)
    relativePrior = Distribution('Uniform', min=np.r_[0.01, 0.01], max=np.r_[0.5, 0.5])
    additivePrior = Distribution('Uniform', min=np.r_[1e-16, 1e-16], max=np.r_[1e-10, 1e-10], log=True)
    tdp.set_priors(relative_error_prior=relativePrior, additive_error_prior=additivePrior, z_prior=z_prior)








.. GENERATED FROM PYTHON SOURCE LINES 145-146

In order to perturb our solvable parameters, we need to attach proposal distributions

.. GENERATED FROM PYTHON SOURCE LINES 146-151

.. code-block:: default

    z_proposal = Distribution('Normal', mean=tdp.z, variance = 0.01)
    relativeProposal = Distribution('MvNormal', mean=tdp.relative_error, variance=2.5e-7)
    additiveProposal = Distribution('MvLogNormal', mean=tdp.additive_error, variance=2.5e-3, linearSpace=True)
    tdp.set_proposals(relativeProposal, additiveProposal, z_proposal=z_proposal)








.. GENERATED FROM PYTHON SOURCE LINES 152-153

With priorss set we can auto generate the posteriors

.. GENERATED FROM PYTHON SOURCE LINES 153-155

.. code-block:: default

    tdp.set_posteriors()








.. GENERATED FROM PYTHON SOURCE LINES 156-158

Perturb the datapoint and record the perturbations
Note we are not using the priors to accept or reject perturbations.

.. GENERATED FROM PYTHON SOURCE LINES 158-163

.. code-block:: default

    for i in range(10):
        tdp.perturb()
        tdp.update_posteriors()









.. GENERATED FROM PYTHON SOURCE LINES 164-165

Plot the posterior distributions

.. GENERATED FROM PYTHON SOURCE LINES 165-169

.. code-block:: default

    tdp.plot_posteriors(overlay=tdp)

    plt.show()




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_006.png
   :alt: Time Domain EM Data
   :srcset: /examples/Datapoints/images/sphx_glr_plot_skytem_datapoint_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 170-247

File Format for a time domain datapoint
+++++++++++++++++++++++++++++++++++++++
Here we describe the file format for a time domain datapoint.

For individual datapoints we are using the AarhusInv data format.

Here we take the description for the AarhusInv TEM data file, modified to reflect what we can
currently handle in GeoBIPy.

Line 1 :: string
  User-defined label describing the TEM datapoint.
  This line must contain the following, separated by semicolons.
  XUTM=
  YUTM=
  Elevation=
  StationNumber=
  LineNumber=
  Current=

Line 2 :: first integer, sourceType
  7 = Rectangular loop source parallel to the x - y plane
Line 2 :: second integer, polarization
  3 = Vertical magnetic field

Line 3 :: 6 floats, transmitter and receiver offsets relative to X/Y UTM location.
  If sourceType = 7, Position of the center loop sounding.

Line 4 :: Transmitter loop dimensions
  If sourceType = 7, 2 floats.  Loop side length in the x and y directions

Line 5 :: Fixed
  3 3 3

Line 6 :: first integer, transmitter waveform type. Fixed
  3 = User defined waveform.

Line 6 :: second integer, number of transmitter waveforms. Fixed
  1

Line 7 :: transmitter waveform definition
  A user-defined waveform with piecewise linear segments.
  A full transmitter waveform definition consists of a number of linear segments
  This line contains an integer as the first entry, which specifies the number of
  segments, followed by each segment with 4 floats each. The 4 floats per segment
  are the start and end times, and start and end amplitudes of the waveform. e.g.
  3  -8.333e-03 -8.033e-03 0.0 1.0 -8.033e-03 0.0 1.0 1.0 0.0 5.4e-06 1.0 0.0

Line 8 :: On time information. Not used but needs specifying.
  1 1 1

Line 9 :: On time low-pass filters.  Not used but need specifying.
  0

Line 10 :: On time high-pass filters. Not used but need specifying.
  0

Line 11 :: Front-gate time. Not used but need specifying.
  0.0

Line 12 :: first integer, Number of off time filters
  Number of filters

Line 12 :: second integer, Order of the butterworth filter
  1 or 2

Line 12 :: cutoff frequencies Hz, one per the number of filters
  e.g. 4.5e5

Line 13 :: Off time high pass filters.
  See Line 12

Lines after 13 contain 3 columns that pertain to
Measurement Time, Data Value, Estimated Standard Deviation

Example data files are contained in
`the supplementary folder`_ in this repository

.. _the supplementary folder: https://github.com/usgs/geobipy/tree/master/documentation_source/source/examples/supplementary/Data


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.317 seconds)


.. _sphx_glr_download_examples_Datapoints_plot_skytem_datapoint.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_skytem_datapoint.py <plot_skytem_datapoint.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_skytem_datapoint.ipynb <plot_skytem_datapoint.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
