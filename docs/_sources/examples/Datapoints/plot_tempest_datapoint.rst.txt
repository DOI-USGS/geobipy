
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Datapoints/plot_tempest_datapoint.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Datapoints_plot_tempest_datapoint.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Datapoints_plot_tempest_datapoint.py:


Tempest Datapoint Class
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-25

There are three ways in which to create a time domain datapoint

1) :ref:`Instantiating a time domain datapoint`

2) :ref:`Reading a datapoint from a file`

3) :ref:`Obtaining a datapoint from a dataset`

Once instantiated, see :ref:`Using a time domain datapoint`

Credits:
We would like to thank Ross Brodie at Geoscience Australia for his airborne time domain forward modeller
https://github.com/GeoscienceAustralia/ga-aem

For ground-based time domain data, we are using Dieter Werthmuller's python package Empymod
https://empymod.github.io/

Thanks to Dieter for his help getting Empymod ready for incorporation into GeoBIPy

.. GENERATED FROM PYTHON SOURCE LINES 27-41

.. code-block:: default

    from os.path import join
    import numpy as np
    import h5py
    import matplotlib.pyplot as plt
    from geobipy import TempestData
    # from geobipy import TemDataPoint
    from geobipy import RectilinearMesh1D
    from geobipy import Model
    from geobipy import StatArray
    from geobipy import Distribution

    dataFolder = "..//supplementary//data//"
    # dataFolder = "source//examples//supplementary//Data"








.. GENERATED FROM PYTHON SOURCE LINES 42-48

Obtaining a datapoint from a dataset
++++++++++++++++++++++++++++++++++++
More often than not, our observed data is stored in a file on disk.
We can read in a dataset and pull datapoints from it.

For more information about the time domain data set, see :ref:`Time domain dataset`

.. GENERATED FROM PYTHON SOURCE LINES 48-63

.. code-block:: default


    # The data file name
    dataFile = dataFolder + 'tempest_saline_clay.csv'
    # The EM system file name
    systemFile = dataFolder + 'Tempest.stm'

    # Prepare the dataset so that we can read a point at a time.
    Dataset = TempestData._initialize_sequential_reading(dataFile, systemFile)
    # Get a datapoint from the file.
    tdp = Dataset._read_record(0)

    plt.figure()
    tdp.plot()





.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_001.png
   :alt: Time Domain EM Data
   :srcset: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot: title={'center': 'Time Domain EM Data'}, xlabel='Time (s)', ylabel='Data (fT)'>



.. GENERATED FROM PYTHON SOURCE LINES 64-66

Using a time domain datapoint
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 68-69

We can define a 1D layered earth model, and use it to predict some data

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default

    par = StatArray(np.r_[1/50.0, 1/100.0, 1/1000.0, 1/5.0, 1/1000.0, 1/800.0], "Conductivity", "$\frac{S}{m}$")
    mod = Model(mesh=RectilinearMesh1D(edges=np.r_[0, 20.0, 50.0, 100.0, 150.0, 250.0, np.inf]), values=par)








.. GENERATED FROM PYTHON SOURCE LINES 73-74

Forward model the data

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: default

    tdp.forward(mod)








.. GENERATED FROM PYTHON SOURCE LINES 77-86

.. code-block:: default

    plt.figure()
    plt.subplot(121)
    _ = mod.pcolor(transpose=True)
    plt.subplot(122)
    _ = tdp.plot()
    _ = tdp.plot_predicted()
    plt.tight_layout()
    plt.suptitle('Model and response')




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_002.png
   :alt: Model and response, Time Domain EM Data
   :srcset: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 0.98, 'Model and response')



.. GENERATED FROM PYTHON SOURCE LINES 87-90

plt.figure()
tdp.plotDataResidual(xscale='log')
plt.title('data residual')

.. GENERATED FROM PYTHON SOURCE LINES 92-93

Compute the sensitivity matrix for a given model

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: default

    J = tdp.sensitivity(mod)
    plt.figure()
    _ = np.abs(J).pcolor(equalize=True, log=10, flipY=True)




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_003.png
   :alt: plot tempest datapoint
   :srcset: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-102

Attaching statistical descriptors to the datapoint
++++++++++++++++++++++++++++++++++++++++++++++++++

Set relative errors for the primary fields, and secondary fields.

.. GENERATED FROM PYTHON SOURCE LINES 102-110

.. code-block:: default

    tdp.relative_error = np.r_[0.01, 0.05]

    # Set the additive errors for
    tdp.additive_error = np.hstack([[0.011474, 0.012810, 0.008507, 0.005154, 0.004742, 0.004477, 0.004168, 0.003539, 0.003352, 0.003213, 0.003161, 0.003122, 0.002587, 0.002038, 0.002201],
                                    [0.007383, 0.005693, 0.005178, 0.003659, 0.003426, 0.003046, 0.003095, 0.003247, 0.002775, 0.002627, 0.002460, 0.002178, 0.001754, 0.001405, 0.001283]])
    # Define a multivariate log normal distribution as the prior on the predicted data.
    tdp.predictedData.prior = Distribution('MvLogNormal', tdp.data[tdp.active], tdp.std[tdp.active]**2.0)








.. GENERATED FROM PYTHON SOURCE LINES 111-112

This allows us to evaluate the likelihood of the predicted data

.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: default

    print(tdp.likelihood(log=True))
    # Or the misfit
    print(tdp.dataMisfit())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -60615.15730576242
    121379.20759919994




.. GENERATED FROM PYTHON SOURCE LINES 117-118

Plot the misfits for a range of half space conductivities

.. GENERATED FROM PYTHON SOURCE LINES 118-123

.. code-block:: default

    plt.figure()
    plt.subplot(1, 2, 1)
    _ = tdp.plotHalfSpaceResponses(-6.0, 4.0, 200)
    plt.title("Halfspace responses")




.. image-sg:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_004.png
   :alt: Halfspace responses
   :srcset: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Halfspace responses')



.. GENERATED FROM PYTHON SOURCE LINES 124-125

We can perform a quick search for the best fitting half space

.. GENERATED FROM PYTHON SOURCE LINES 125-146

.. code-block:: default

    halfspace = tdp.find_best_halfspace()
    print('Best half space conductivity is {} $S/m$'.format(halfspace.values))
    plt.subplot(1, 2, 2)
    _ = tdp.plot()
    _ = tdp.plot_predicted()

    plt.figure()
    tdp.plot_secondary_field()
    tdp.plot_predicted_secondary_field()

    # ################################################################################
    # # We can attach priors to the height of the datapoint,
    # # the relative error multiplier, and the additive error noise floor

    # Define the distributions used as priors.
    relative_prior = Distribution('Uniform', min=np.r_[0.01, 0.01], max=np.r_[0.5, 0.5])
    receiver_x_prior = Distribution('Uniform', min=np.float64(tdp.receiver.x) - 1.0, max=np.float64(tdp.receiver.x) + 1.0)
    receiver_z_prior = Distribution('Uniform', min=np.float64(tdp.receiver.z) - 1.0, max=np.float64(tdp.receiver.z) + 1.0)
    receiver_pitch_prior = Distribution('Uniform', min=tdp.receiver.pitch - 5.0, max=tdp.receiver.pitch + 5.0)
    tdp.set_priors(relative_error_prior=relative_prior, receiver_x_prior=receiver_x_prior, receiver_z_prior=receiver_z_prior, receiver_pitch_prior=receiver_pitch_prior)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_005.png
         :alt: Time Domain EM Data
         :srcset: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_006.png
         :alt: Secondary field
         :srcset: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Best half space conductivity is [0.03853529] $S/m$




.. GENERATED FROM PYTHON SOURCE LINES 147-148

In order to perturb our solvable parameters, we need to attach proposal distributions

.. GENERATED FROM PYTHON SOURCE LINES 148-154

.. code-block:: default

    relative_proposal = Distribution('MvNormal', mean=tdp.relative_error, variance=2.5e-4)
    receiver_x_proposal = Distribution('Normal', mean=tdp.receiver.x, variance = 0.01)
    receiver_z_proposal = Distribution('Normal', mean=tdp.receiver.z, variance = 0.01)
    receiver_pitch_proposal = Distribution('Normal', mean=tdp.receiver.pitch, variance = 0.01)
    tdp.set_proposals(relative_error_proposal=relative_proposal, receiver_x_proposal=receiver_x_proposal, receiver_z_proposal=receiver_z_proposal, receiver_pitch_proposal=receiver_pitch_proposal)








.. GENERATED FROM PYTHON SOURCE LINES 155-156

With priorss set we can auto generate the posteriors

.. GENERATED FROM PYTHON SOURCE LINES 156-158

.. code-block:: default

    tdp.set_posteriors()








.. GENERATED FROM PYTHON SOURCE LINES 159-161

Perturb the datapoint and record the perturbations
Note we are not using the priors to accept or reject perturbations.

.. GENERATED FROM PYTHON SOURCE LINES 161-165

.. code-block:: default

    for i in range(10):
        tdp.perturb()
        tdp.update_posteriors()

    plt.show()







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.619 seconds)


.. _sphx_glr_download_examples_Datapoints_plot_tempest_datapoint.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_tempest_datapoint.py <plot_tempest_datapoint.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_tempest_datapoint.ipynb <plot_tempest_datapoint.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
