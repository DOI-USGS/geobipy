
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Data/plot_pointcloud3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Data_plot_pointcloud3d.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Data_plot_pointcloud3d.py:


3D Point Cloud class
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-16

.. code-block:: Python


    from geobipy import Point
    from os.path import join
    import numpy as np
    import matplotlib.pyplot as plt
    import h5py

    nPoints = 200








.. GENERATED FROM PYTHON SOURCE LINES 17-19

Create a quick test example using random points
$z=x(1-x)cos(4\pi x)sin(4\pi y^{2})^{2}$

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: Python

    x = -np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    y = -np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    z = x * (1.0 - x) * np.cos(np.pi * x) * np.sin(np.pi * y)

    PC3D = Point(x=x, y=y, z=z)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Append pointclouds together

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    x = np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    y = np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    z = x * (1.0 - x) * np.cos(np.pi * x) * np.sin(np.pi * y)

    Other_PC = Point(x=x, y=y, z=z)
    PC3D.append(Other_PC)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <geobipy.src.classes.pointcloud.Point.Point object at 0x15d8bd710>



.. GENERATED FROM PYTHON SOURCE LINES 35-36

Write a summary of the contents of the point cloud

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: Python


    print(PC3D.summary)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Point
    x:
    |   StatArray
    |   Name:   Easting (m)
    |   Address:['0x15e618d50']
    |   Shape:  (400,)
    |   Values: [-0.71137954 -0.3793497  -0.30956525 ...  0.14065745  0.05106131
    |     0.88015259]
    |   Min:    -0.9976593326444143
    |   Max:    0.9920098541714664
    |   has_posterior: False

    y:
    |   StatArray
    |   Name:   Northing (m)
    |   Address:['0x15e61a750']
    |   Shape:  (400,)
    |   Values: [-0.37888241 -0.21170869 -0.82494396 ...  0.71680437  0.78865183
    |     0.60356845]
    |   Min:    -0.9966527811460972
    |   Max:    0.9990626592727034
    |   has_posterior: False

    z:
    |   StatArray
    |   Name:   Height (m)
    |   Address:['0x15e61b8d0']
    |   Shape:  (400,)
    |   Values: [-0.6966743   0.11948867  0.11933325 ...  0.08488321  0.02947636
    |    -0.09294835]
    |   Min:    -1.9925193760132849
    |   Max:    0.22842565578586502
    |   has_posterior: False

    elevation:
    |   StatArray
    |   Name:   Elevation (m)
    |   Address:['0x15e61bad0']
    |   Shape:  (400,)
    |   Values: [0. 0. 0. ... 0. 0. 0.]
    |   Min:    0.0
    |   Max:    0.0
    |   has_posterior: False






.. GENERATED FROM PYTHON SOURCE LINES 40-41

Get a single location from the point as a 3x1 vector

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: Python


    Point = PC3D[50]
    # Print the point to the screen








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Plot the locations with Height as colour

.. GENERATED FROM PYTHON SOURCE LINES 47-51

.. code-block:: Python


    plt.figure()
    PC3D.scatter2D(edgecolor='k')




.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_001.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: xlabel='Easting (m)', ylabel='Northing (m)'>, <matplotlib.collections.PathCollection object at 0x15e37bb60>, <matplotlib.colorbar.Colorbar object at 0x15e378050>)



.. GENERATED FROM PYTHON SOURCE LINES 52-55

Plotting routines take matplotlib arguments for customization

For example, plotting the size of the points according to the absolute value of height

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python

    plt.figure()
    ax = PC3D.scatter2D(s=100*np.abs(PC3D.z), edgecolor='k')




.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_002.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-60

Interpolate the points to a 2D rectilinear mesh

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: Python

    mesh, dum = PC3D.interpolate(0.01, 0.01, values=PC3D.z, method='sibson', mask=0.03)

    # We can save that mesh to VTK
    PC3D.to_vtk('pc3d.vtk')
    mesh.to_vtk('interpolated_pc3d.vtk')








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Grid the points using a triangulated CloughTocher, or minimum curvature interpolation

.. GENERATED FROM PYTHON SOURCE LINES 68-83

.. code-block:: Python


    plt.figure()
    plt.subplot(331)
    PC3D.map(dx=0.01, dy=0.01, method='ct')
    plt.subplot(332)
    PC3D.map(dx=0.01, dy=0.01, method='mc')
    plt.subplot(333)
    PC3D.map(dx=0.01, dy=0.01, method='sibson')

    plt.subplot(334)
    PC3D.map(dx=0.01, dy=0.01, method='ct', mask=0.03)
    plt.subplot(335)
    PC3D.map(dx=0.01, dy=0.01, method='mc', mask=0.3)
    plt.subplot(336)
    PC3D.map(dx=0.01, dy=0.01, method='sibson', mask=0.03)



.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_003.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 2 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.
    surface [WARNING]: 2 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (<Axes: >, <matplotlib.collections.QuadMesh object at 0x15e482c00>, <matplotlib.colorbar.Colorbar object at 0x15e898d40>)



.. GENERATED FROM PYTHON SOURCE LINES 84-85

For lots of points, these surfaces can look noisy. Using a block filter will help

.. GENERATED FROM PYTHON SOURCE LINES 85-94

.. code-block:: Python

    PCsub = PC3D.block_median(0.05, 0.05)
    plt.subplot(337)
    PCsub.map(dx=0.01, dy=0.01, method='ct', mask=0.03)
    plt.subplot(338)
    PCsub.map(dx=0.01, dy=0.01, method='mc', mask=0.03)
    plt.subplot(339)
    PCsub.map(dx=0.01, dy=0.01, method='sibson', mask=0.03)





.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_004.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 2 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (<Axes: >, <matplotlib.collections.QuadMesh object at 0x15d6e0c20>, <matplotlib.colorbar.Colorbar object at 0x15daf4a70>)



.. GENERATED FROM PYTHON SOURCE LINES 95-96

We can perform spatial searches on the 3D point cloud

.. GENERATED FROM PYTHON SOURCE LINES 96-100

.. code-block:: Python


    PC3D.set_kdtree(ndim=2)
    p = PC3D.nearest((0.0,0.0), k=200, p=2, radius=0.3)








.. GENERATED FROM PYTHON SOURCE LINES 101-103

.nearest returns the distances and indices into the point cloud of the nearest points.
We can then obtain those points as another point cloud

.. GENERATED FROM PYTHON SOURCE LINES 103-115

.. code-block:: Python


    # pNear = PC3D[p[1]]
    # plt.figure()
    # ax1 = plt.subplot(1,2,1)
    # pNear.scatter2D()
    # plt.plot(0.0, 0.0, 'x')
    # plt.subplot(1,2,2, sharex=ax1, sharey=ax1)
    # ax, sc, cb = PC3D.scatter2D(edgecolor='k')
    # searchRadius = plt.Circle((0.0, 0.0), 0.3, color='b', fill=False)
    # ax.add_artist(searchRadius)
    # plt.plot(0.0, 0.0, 'x')








.. GENERATED FROM PYTHON SOURCE LINES 116-117

Read in the xyz co-ordinates in columns 2,3,4 from a file. Skip 1 header line.

.. GENERATED FROM PYTHON SOURCE LINES 117-123

.. code-block:: Python


    dataFolder = "..//..//supplementary//Data//"

    PC3D.read_csv(filename=dataFolder + 'Resolve1.txt')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <geobipy.src.classes.pointcloud.Point.Point object at 0x15e61e4d0>



.. GENERATED FROM PYTHON SOURCE LINES 124-138

.. code-block:: Python

    plt.figure()
    f = PC3D.scatter2D(s=10)

    with h5py.File('test.h5', 'w') as f:
        PC3D.createHdf(f, 'test')
        PC3D.writeHdf(f, 'test')

    with h5py.File('test.h5', 'r') as f:
        PC3D1 = Point.fromHdf(f['test'])

    with h5py.File('test.h5', 'r') as f:
        point = Point.fromHdf(f['test'], index=0)

    plt.show()



.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_005.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.708 seconds)


.. _sphx_glr_download_examples_Data_plot_pointcloud3d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_pointcloud3d.ipynb <plot_pointcloud3d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_pointcloud3d.py <plot_pointcloud3d.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_pointcloud3d.zip <plot_pointcloud3d.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
