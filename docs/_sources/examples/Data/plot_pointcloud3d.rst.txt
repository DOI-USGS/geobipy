
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Data/plot_pointcloud3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Data_plot_pointcloud3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Data_plot_pointcloud3d.py:


3D Point Cloud class
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-16

.. code-block:: default


    from geobipy import PointCloud3D
    from os.path import join
    import numpy as np
    import matplotlib.pyplot as plt
    import h5py

    nPoints = 10000








.. GENERATED FROM PYTHON SOURCE LINES 17-19

Create a quick test example using random points
$z=x(1-x)cos(4\pi x)sin(4\pi y^{2})^{2}$

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default

    x = -np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    y = -np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    z = x * (1.0 - x) * np.cos(np.pi * x) * np.sin(np.pi * y)

    PC3D = PointCloud3D(x=x, y=y, z=z)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Append pointclouds together

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: default

    x = np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    y = np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    z = x * (1.0 - x) * np.cos(np.pi * x) * np.sin(np.pi * y)

    Other_PC = PointCloud3D(x=x, y=y, z=z)
    PC3D.append(Other_PC)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Write a summary of the contents of the point cloud

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default


    print(PC3D.summary)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PointCloud3D: 
    Number of Points: : 20000 
    Name: Easting (m) 0x7fa12ab37dc0
    Shape: (20000,)
    Values: [-0.44546953 -0.89994553 -0.71782385 ...  0.27079865  0.14132942
      0.63169886]
    min: -0.9999504404124657
    max: 0.9998640984073268
     Name: Northing (m) 0x7fa12ab37a40
    Shape: (20000,)
    Values: [-0.73098386 -0.92349677 -0.63863351 ...  0.65815965  0.64443775
      0.54662795]
    min: -0.9999428907397243
    max: 0.9999190531221531
     Name: Height (m) 0x7fa12ab35440
    Shape: (20000,)
    Values: [ 0.08211607 -0.38706153 -0.70672231 ...  0.1144691   0.09849886
     -0.0925351 ]
    min: -1.9981656132779888
    max: 0.22933539043594525
     Name: Elevation (m) 0x7fa12ab37ac0
    Shape: (20000,)
    Values: [0. 0. 0. ... 0. 0. 0.]
    min: 0.0
    max: 0.0





.. GENERATED FROM PYTHON SOURCE LINES 40-41

Get a single location from the point as a 3x1 vector

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: default


    Point = PC3D[50]
    # Print the point to the screen
    print(Point)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <geobipy.src.classes.pointcloud.Point.Point object at 0x7fa10882d6f0>




.. GENERATED FROM PYTHON SOURCE LINES 47-48

Plot the locations with Height as colour

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default


    plt.figure()
    PC3D.scatter2D(edgecolor='k')




.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_001.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<AxesSubplot: xlabel='Easting (m)', ylabel='Northing (m)'>, <matplotlib.collections.PathCollection object at 0x7fa1189aa3e0>, <matplotlib.colorbar.Colorbar object at 0x7fa1189aa6e0>)



.. GENERATED FROM PYTHON SOURCE LINES 53-56

Plotting routines take matplotlib arguments for customization

For example, plotting the size of the points according to the absolute value of height

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    plt.figure()
    ax = PC3D.scatter2D(s=100*np.abs(PC3D.z), edgecolor='k')




.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_002.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-61

Interpolate the points to a 2D rectilinear mesh

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: default

    mesh, dum = PC3D.interpolate(0.01, 0.01, values=PC3D.z, method='mc', mask=0.03)

    # We can save that mesh to VTK
    PC3D.to_vtk('pc3d.vtk')
    mesh.to_vtk('interpolated_pc3d.vtk')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 7341 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.




.. GENERATED FROM PYTHON SOURCE LINES 68-69

Grid the points using a triangulated CloughTocher, or minimum curvature interpolation

.. GENERATED FROM PYTHON SOURCE LINES 69-80

.. code-block:: default


    plt.figure()
    plt.subplot(321)
    PC3D.map(dx=0.01, dy=0.01, method='ct')
    plt.subplot(322)
    PC3D.map(dx=0.01, dy=0.01, method='mc')

    plt.subplot(323)
    PC3D.map(dx=0.01, dy=0.01, method='ct', mask=0.03)
    plt.subplot(324)
    PC3D.map(dx=0.01, dy=0.01, method='mc', mask=0.03)



.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_003.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 7341 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.
    surface [WARNING]: 7341 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (<AxesSubplot: xlabel='Easting (m)', ylabel='Northing (m)'>, <matplotlib.collections.QuadMesh object at 0x7fa109c573a0>, <matplotlib.colorbar.Colorbar object at 0x7fa109c57a60>)



.. GENERATED FROM PYTHON SOURCE LINES 81-82

For lots of points, these surfaces can look noisy. Using a block filter will help

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default

    PCsub = PC3D.block_median(0.005, 0.005)
    plt.subplot(325)
    PCsub.map(dx=0.01, dy=0.01, method='ct', mask=0.03)
    plt.subplot(326)
    PCsub.map(dx=0.01, dy=0.01, method='mc', mask=0.03)





.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_004.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 5693 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (<AxesSubplot: xlabel='Easting (m)', ylabel='Northing (m)'>, <matplotlib.collections.QuadMesh object at 0x7fa119b26f50>, <matplotlib.colorbar.Colorbar object at 0x7fa119b27a60>)



.. GENERATED FROM PYTHON SOURCE LINES 90-91

We can perform spatial searches on the 3D point cloud

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: default


    PC3D.setKdTree(nDims=2)
    p = PC3D.nearest((0.0,0.0), k=200, p=2, radius=0.3)








.. GENERATED FROM PYTHON SOURCE LINES 96-98

.nearest returns the distances and indices into the point cloud of the nearest points.
We can then obtain those points as another point cloud

.. GENERATED FROM PYTHON SOURCE LINES 98-110

.. code-block:: default


    pNear = PC3D[p[1]]
    plt.figure()
    ax1 = plt.subplot(1,2,1)
    pNear.scatter2D()
    plt.plot(0.0, 0.0, 'x')
    plt.subplot(1,2,2, sharex=ax1, sharey=ax1)
    ax, sc, cb = PC3D.scatter2D(edgecolor='k')
    searchRadius = plt.Circle((0.0, 0.0), 0.3, color='b', fill=False)
    ax.add_artist(searchRadius)
    plt.plot(0.0, 0.0, 'x')




.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_005.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x7fa119bf0430>]



.. GENERATED FROM PYTHON SOURCE LINES 111-112

Read in the xyz co-ordinates in columns 2,3,4 from a file. Skip 1 header line.

.. GENERATED FROM PYTHON SOURCE LINES 112-118

.. code-block:: default


    dataFolder = "..//supplementary//Data//"

    PC3D.read_csv(filename=dataFolder + 'Resolve1.txt')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <geobipy.src.classes.pointcloud.PointCloud3D.PointCloud3D object at 0x7fa119bf0880>



.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: default



    plt.figure()
    f = PC3D.scatter2D(s=10)

    with h5py.File('test.h5', 'w') as f:
        PC3D.createHdf(f, 'test')
        PC3D.writeHdf(f, 'test')

    with h5py.File('test.h5', 'r') as f:
        PC3D1 = PointCloud3D.fromHdf(f['test'])

    with h5py.File('test.h5', 'r') as f:
        point = PointCloud3D.fromHdf(f['test'], index=0)

    plt.show()



.. image-sg:: /examples/Data/images/sphx_glr_plot_pointcloud3d_006.png
   :alt: plot pointcloud3d
   :srcset: /examples/Data/images/sphx_glr_plot_pointcloud3d_006.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.405 seconds)


.. _sphx_glr_download_examples_Data_plot_pointcloud3d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_pointcloud3d.py <plot_pointcloud3d.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_pointcloud3d.ipynb <plot_pointcloud3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
