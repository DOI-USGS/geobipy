
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Data/plot_frequency_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Data_plot_frequency_dataset.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Data_plot_frequency_dataset.py:


Frequency domain dataset
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 6-14

.. code-block:: default

    import matplotlib.pyplot as plt
    from geobipy import CircularLoops
    from geobipy import FdemSystem
    from geobipy import FdemData
    import h5py
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 15-17

Defining data using a frequency domain system
+++++++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 19-21

We can start by defining the frequencies, transmitter loops, and receiver loops
For each frequency we need to define a pair of loops

.. GENERATED FROM PYTHON SOURCE LINES 21-23

.. code-block:: default

    frequencies = np.asarray([395.0, 822.0, 3263.0, 8199.0, 38760.0, 128755.0])








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Transmitter positions are defined relative to the observation locations in the data
This is usually a constant offset for all data points.

.. GENERATED FROM PYTHON SOURCE LINES 26-36

.. code-block:: default

    transmitters = CircularLoops(orientation=['z','z','x','z','z','z'],
                                 moment=np.r_[1, 1, -1, 1, 1, 1],
                                 x = np.r_[0,0,0,0,0,0],
                                 y = np.r_[0,0,0,0,0,0],
                                 z = np.r_[0,0,0,0,0,0],
                                 pitch = np.r_[0,0,0,0,0,0],
                                 roll = np.r_[0,0,0,0,0,0],
                                 yaw = np.r_[0,0,0,0,0,0],
                                 radius = np.r_[1,1,1,1,1,1])








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Receiver positions are defined relative to the transmitter

.. GENERATED FROM PYTHON SOURCE LINES 38-48

.. code-block:: default

    receivers = CircularLoops(orientation=['z','z','x','z','z','z'],
                                 moment=np.r_[1, 1, -1, 1, 1, 1],
                                 x = np.r_[7.91, 7.91, 9.03, 7.91, 7.91, 7.89],
                                 y = np.r_[0,0,0,0,0,0],
                                 z = np.r_[0,0,0,0,0,0],
                                 pitch = np.r_[0,0,0,0,0,0],
                                 roll = np.r_[0,0,0,0,0,0],
                                 yaw = np.r_[0,0,0,0,0,0],
                                 radius = np.r_[1,1,1,1,1,1])








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Instantiate the system for the data

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    system = FdemSystem(frequencies=frequencies, transmitter=transmitters, receiver=receivers)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Create some data with random co-ordinates

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default

    x = np.random.randn(100)
    y = np.random.randn(100)
    z = np.random.randn(100)

    data = FdemData(x=x, y=-y, z=z, system = system)








.. GENERATED FROM PYTHON SOURCE LINES 61-64

Reading in the Data
+++++++++++++++++++
Of course measured field data is stored on disk. So instead we can read data from file.

.. GENERATED FROM PYTHON SOURCE LINES 66-72

.. code-block:: default

    dataFolder = "..//supplementary//data//"
    # The data file name
    dataFile = dataFolder + 'Resolve2.txt'
    # The EM system file name
    systemFile = dataFolder + 'FdemSystem2.stm'








.. GENERATED FROM PYTHON SOURCE LINES 73-74

Read in a data set from file.

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: default

    FD1 = FdemData.read_csv(dataFile, systemFile)








.. GENERATED FROM PYTHON SOURCE LINES 77-78

Take a look at the channel names

.. GENERATED FROM PYTHON SOURCE LINES 78-106

.. code-block:: default

    for name in FD1.channelNames:
        print(name)

    # ################################################################################
    # # Get data points by slicing
    # FDa = FD1[10:]
    # FD1 = FD1[:10]

    # ################################################################################
    # # Append data sets together
    # FD1.append(FDa)


    # ################################################################################
    # # Plot the locations of the data points
    # plt.figure(figsize=(8,6))
    # _ = FD1.scatter2D();

    # ################################################################################
    # # Plot all the data along the specified line
    # plt.figure(figsize=(8,6))
    # _ = FD1.plotLine(30010.0, log=10);

    # ################################################################################
    # # Or, plot specific channels in the data
    # plt.figure(figsize=(8,6))
    # _ = FD1.plot(channels=[0,11,8], log=10, linewidth=0.5);





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    In_Phase 380.0
    In_Phase 1776.0
    In_Phase 3345.0
    In_Phase 8171.0
    In_Phase 41020.0
    In_Phase 129550.0
    Quadrature 380.0
    Quadrature 1776.0
    Quadrature 3345.0
    Quadrature 8171.0
    Quadrature 41020.0
    Quadrature 129550.0




.. GENERATED FROM PYTHON SOURCE LINES 107-108

Read in a second data set

.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: default

    FD2 = FdemData.read_csv(dataFilename=dataFolder + 'Resolve1.txt', systemFilename=dataFolder + 'FdemSystem1.stm')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Warning: Your data contains values that are <= 0.0




.. GENERATED FROM PYTHON SOURCE LINES 111-112

We can create maps of the elevations in two separate figures

.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: default

    plt.figure(figsize=(8,6))
    _ = FD1.map(dx=50.0, dy=50.0, mask = 200.0)
    plt.axis('equal');




.. image-sg:: /examples/Data/images/sphx_glr_plot_frequency_dataset_001.png
   :alt: plot frequency dataset
   :srcset: /examples/Data/images/sphx_glr_plot_frequency_dataset_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 66659 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (584494.28, 590194.28, 4639054.24, 4661854.24)



.. GENERATED FROM PYTHON SOURCE LINES 117-122

.. code-block:: default


    plt.figure(figsize=(8,6))
    _ = FD2.map(dx=50.0, dy=50.0, mask = 200.0)
    plt.axis('equal');




.. image-sg:: /examples/Data/images/sphx_glr_plot_frequency_dataset_002.png
   :alt: plot frequency dataset
   :srcset: /examples/Data/images/sphx_glr_plot_frequency_dataset_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 123487 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (662822.398, 668372.398, 4560028.655, 4600678.655)



.. GENERATED FROM PYTHON SOURCE LINES 123-128

Or, we can plot both data sets in one figure to see their positions relative
to each other.

In this case, I use a 2D scatter plot of the data point co-ordinates, and pass
one of the channels as the colour.

.. GENERATED FROM PYTHON SOURCE LINES 128-133

.. code-block:: default


    plt.figure(figsize=(8,6))
    _ = FD1.scatter2D(s=1.0, c=FD1.data[:, 0])
    _ = FD2.scatter2D(s=1.0, c=FD2.data[:, 0], cmap='jet');




.. image-sg:: /examples/Data/images/sphx_glr_plot_frequency_dataset_003.png
   :alt: plot frequency dataset
   :srcset: /examples/Data/images/sphx_glr_plot_frequency_dataset_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 134-136

Or, interpolate the values to create a gridded "map". mapChannel will
interpolate the specified channel number.

.. GENERATED FROM PYTHON SOURCE LINES 136-141

.. code-block:: default


    plt.figure(figsize=(8,6))
    _ = FD1.mapData(channel=3, system=0, dx=200, dy=200, mask=250)
    plt.axis('equal');




.. image-sg:: /examples/Data/images/sphx_glr_plot_frequency_dataset_004.png
   :alt: In_Phase 8171.0
   :srcset: /examples/Data/images/sphx_glr_plot_frequency_dataset_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    surface [WARNING]: 70336 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (584419.28, 590219.28, 4638979.24, 4661979.24)



.. GENERATED FROM PYTHON SOURCE LINES 142-143

Export the data to VTK

.. GENERATED FROM PYTHON SOURCE LINES 143-146

.. code-block:: default

    FD1.to_vtk('FD_one.vtk')
    # FD2.to_vtk('FD_two.vtk')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     Predicted Data (ppm) 




.. GENERATED FROM PYTHON SOURCE LINES 147-149

Obtain a line from the data set
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 151-152

Take a look at the line numbers in the dataset

.. GENERATED FROM PYTHON SOURCE LINES 152-154

.. code-block:: default

    print(np.unique(FD1.lineNumber))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [30010 30020 30030 ... 30100 39010 39020]




.. GENERATED FROM PYTHON SOURCE LINES 155-157

.. code-block:: default

    L = FD1.line(30010.0)








.. GENERATED FROM PYTHON SOURCE LINES 158-159

A summary will now show the properties of the line.

.. GENERATED FROM PYTHON SOURCE LINES 159-162

.. code-block:: default


    print(L.summary)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    FdemData: 
    Number of Points: : 6710 
    Name: Easting (m) 0x7ff5944a1ac0
    Shape: (6710,)
    Values: [586852.29 586852.23 586852.17 ... 586123.57 586123.2  586122.82]
    min: 586122.82
    max: 586852.29
     Name: Northing (m) 0x7ff5944a1040
    Shape: (6710,)
    Values: [4639119.38 4639122.68 4639125.98 ... 4661765.26 4661768.84 4661772.42]
    min: 4639119.38
    max: 4661772.42
     Name: Height (m) 0x7ff5944a38c0
    Shape: (6710,)
    Values: [36.115 36.498 36.835 ... 27.799 27.704 27.601]
    min: 23.830000000000002
    max: 50.567
     Name: Elevation (m) 0x7ff592dfa0c0
    Shape: (6710,)
    Values: [1246.84 1246.71 1246.61 ... 1337.94 1337.96 1338.02]
    min: 1213.18
    max: 1338.02
    Data:          : 
    # of Channels: 12 
    # of Total Data: 80520 
    Name:  0x7ff592dfa5c0
    Shape: (6710, 12)
    Values: [[145.3 435.8 260.6 ... 516.5 405.7 255.7]
     [145.7 436.5 257.9 ... 513.6 403.2 252. ]
     [146.4 437.4 255.8 ... 511.2 400.9 248.8]
     ...
     [ 70.7 314.1 220.2 ... 743.3 960.8 910.7]
     [ 71.3 315.3 220.5 ... 745.9 968.3 919.1]
     [ 72.1 316.6 220.7 ... 749.2 976.5 928.3]]
    min: 37.7
    max: 3726.9

     Name:  0x7ff592dfa240
    Shape: (6710, 12)
    Values: [[1.76386196 4.47125978 2.79127856 ... 5.26091484 4.17842662 2.74558719]
     [1.76715845 4.47808274 2.76608767 ... 5.23244646 4.15415744 2.71116211]
     [1.77293429 4.48685591 2.74651852 ... 5.20889086 4.13183748 2.68144439]
     ...
     [1.22468322 3.29634358 2.41843007 ... 7.49996593 9.65989979 9.16173832]
     [1.22815675 3.30778007 2.42116191 ... 7.52573458 9.73449994 9.24524099]
     [1.23281832 3.32017409 2.42298349 ... 7.55844323 9.81606973 9.33670654]]
    min: 1.0687043557504572
    max: 37.28241356189269

     Name: Predicted Data (ppm) 0x7ff592dfbac0
    Shape: (6710, 12)
    Values: [[0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]
     ...
     [0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]]
    min: 0.0
    max: 0.0






.. GENERATED FROM PYTHON SOURCE LINES 163-164

And we can scatter2D the points in the line.

.. GENERATED FROM PYTHON SOURCE LINES 164-168

.. code-block:: default


    plt.figure(figsize=(8,6))
    _ = L.scatter2D();




.. image-sg:: /examples/Data/images/sphx_glr_plot_frequency_dataset_005.png
   :alt: plot frequency dataset
   :srcset: /examples/Data/images/sphx_glr_plot_frequency_dataset_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 169-171

We can specify the axis along which to plot.
xAxis can be index, x, y, z, r2d, r3d

.. GENERATED FROM PYTHON SOURCE LINES 171-186

.. code-block:: default

    plt.figure(figsize=(8,6))
    _ = FD1.plot_data(channels=np.r_[0, 11, 8], log=10, linewidth=0.5);


    with h5py.File('fdem.h5', 'w') as f:
        FD1.createHdf(f, 'fdem')
        FD1.writeHdf(f, 'fdem')

    with h5py.File('fdem.h5', 'r') as f:
        FD3 = FdemData.fromHdf(f['fdem'])

    with h5py.File('fdem.h5', 'r') as f:
        fdp = FdemData.fromHdf(f['fdem'], index=0)





.. image-sg:: /examples/Data/images/sphx_glr_plot_frequency_dataset_006.png
   :alt: plot frequency dataset
   :srcset: /examples/Data/images/sphx_glr_plot_frequency_dataset_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 187-192

Obtain a single datapoint from the data set
+++++++++++++++++++++++++++++++++++++++++++

Checkout :ref:`Frequency domain datapoint` for an example
about how to use a datapoint once it is instantiated.

.. GENERATED FROM PYTHON SOURCE LINES 192-201

.. code-block:: default

    dp = FD1.datapoint(0)

    # Prepare the dataset so that we can read a point at a time.
    Dataset = FdemData._initialize_sequential_reading(dataFile, systemFile)
    # Get a datapoint from the file.
    DataPoint = Dataset._read_record()

    plt.show()








.. GENERATED FROM PYTHON SOURCE LINES 202-238

File Format for frequency domain data
+++++++++++++++++++++++++++++++++++++
Here we describe the file format for frequency domain data.

The data columns are read in according to the column names in the first line.

In this description, the column name or its alternatives are given followed by what the name represents.
Optional columns are also described.

Required columns
________________
line
    Line number for the data point
fid
    Unique identification number of the data point
x or northing or n
    Northing co-ordinate of the data point, (m)
y or easting or e
    Easting co-ordinate of the data point, (m)
z or alt
    Altitude of the transmitter coil above ground level (m)
elevation
    Elevation of the ground at the data point (m)
I_<frequency[0]> Q_<frequency[0]> ... I_<frequency[last]> Q_<frequency[last]>  - with the number and square brackets
    The measurements for each frequency specified in the accompanying system file.
    I is the real inphase measurement in (ppm)
    Q is the imaginary quadrature measurement in (ppm)
Optional columns
________________
InphaseErr[0] QuadratureErr[0] ... InphaseErr[nFrequencies] QuadratureErr[nFrequencies]
    Estimates of standard deviation for each inphase and quadrature measurement.
    These must appear after the data colums.

Example Header
______________
Line fid easting northing elevation height I_380 Q_380 ... ... I_129550 Q_129550

.. GENERATED FROM PYTHON SOURCE LINES 240-269

File Format for a frequency domain system
+++++++++++++++++++++++++++++++++++++++++
.. role:: raw-html(raw)
   :format: html

The system file is structured using columns with the first line containing header information

Each subsequent row contains the information for each measurement frequency

freq
    Frequency of the channel
tor
    Orientation of the transmitter loop 'x', or 'z'
tmom
    Transmitter moment
tx, ty, tx
    Offset of the transmitter with respect to the observation locations
ror
    Orientation of the receiver loop 'x', or 'z'
rmom
    Receiver moment
rx, ry, rz
    Offset of the receiver with respect to the transmitter location

Example system files are contained in
`the supplementary folder`_ in this repository

.. _the supplementary folder: https://github.com/usgs/geobipy/tree/master/documentation_source/source/examples/supplementary/Data

See the Resolve.stm files.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.153 seconds)


.. _sphx_glr_download_examples_Data_plot_frequency_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_frequency_dataset.py <plot_frequency_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_frequency_dataset.ipynb <plot_frequency_dataset.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
