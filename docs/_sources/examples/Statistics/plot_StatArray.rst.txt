
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_StatArray.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Statistics_plot_StatArray.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_StatArray.py:


StatArray Class
----------------

Extends the numpy ndarray class to add extra attributes such as names, and
units, and allows us to attach statistical descriptors of the array.
The direct extension to numpy maintains speed and functionality of numpy arrays.

.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    import h5py
    from geobipy import DataArray, StatArray, Histogram, Distribution, RectilinearMesh1D


    # plt.style.use('seaborn-pastel')








.. GENERATED FROM PYTHON SOURCE LINES 20-23

Instantiating a new StatArray class
+++++++++++++++++++++++++++++++++++


.. GENERATED FROM PYTHON SOURCE LINES 23-66

.. code-block:: Python


    # Integer
    test = StatArray(1, name='1')
    assert isinstance(test, StatArray) and test.size ==  1 and test.item() == 0.0, TypeError("da 0")
    print(test.summary)
    test = StatArray(10, name='10')
    assert isinstance(test, StatArray) and test.size ==  10 and np.all(test == 0.0), TypeError("da 1")
    print(test.summary)
    # tuple/Shape
    test = StatArray((2, 10), name='(2, 10)')
    assert isinstance(test, StatArray) and np.all(test.shape ==  (2, 10)) and np.all(test == 0.0), TypeError("da 2")
    print(test.summary)

    test = StatArray([2, 10], name='(2, 10)')
    assert isinstance(test, StatArray) and np.all(test ==  [2, 10]), TypeError("da 2")
    print(test.summary)

    # float
    test = StatArray(45.454, name='45.454')
    assert isinstance(test, StatArray) and test.size ==  1 and test.item() == 45.454, TypeError("da 3")
    print(test.summary)
    test = StatArray(np.float64(45.454), name='45.454')
    assert isinstance(test, StatArray) and test.size ==  1 and test.item() == 45.454, TypeError("da 4")
    print(test.summary)

    # array
    test = StatArray(np.random.randn(1), name="test", units="$\frac{g}{cc}$")
    assert isinstance(test, StatArray) and test.size ==  1, TypeError("da 5")
    print(test.summary)

    test = StatArray(np.arange(10.0), name="test", units="$\frac{g}{cc}$")
    assert isinstance(test, StatArray) and test.size ==  10, TypeError("da 6")
    print(test.summary)


    test = DataArray(np.arange(10.0), name="test", units="$\frac{g}{cc}$")
    test = StatArray(test)
    assert isinstance(test, StatArray) and test.size ==  10, TypeError("da 6")
    print(test.summary)

    # The StatArray can take any numpy function that returns an array as an input.
    # The name and units of the variable can be assigned to the StatArray.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    StatArray
    Name:   1
    Address:['0x140b98bd0']
    Shape:  (1,)
    Values: [0.]
    Min:    0.0
    Max:    0.0
    has_posterior: False

    StatArray
    Name:   10
    Address:['0x140b998d0']
    Shape:  (10,)
    Values: [0. 0. 0. ... 0. 0. 0.]
    Min:    0.0
    Max:    0.0
    has_posterior: False

    StatArray
    Name:   (2, 10)
    Address:['0x140b9a2d0']
    Shape:  (2, 10)
    Values: [[0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]]
    Min:    0.0
    Max:    0.0
    has_posterior: False

    StatArray
    Name:   (2, 10)
    Address:['0x140b9add0']
    Shape:  (2,)
    Values: [ 2 10]
    Min:    2
    Max:    10
    has_posterior: False

    StatArray
    Name:   45.454
    Address:['0x10390a350']
    Shape:  (1,)
    Values: [45.454]
    Min:    45.454
    Max:    45.454
    has_posterior: False

    StatArray
    Name:   45.454
    Address:['0x140b9b150']
    Shape:  (1,)
    Values: [45.454]
    Min:    45.454
    Max:    45.454
    has_posterior: False

    StatArray
    Name:   test ($\frac{g}{cc}$)
    Address:['0x10390a350']
    Shape:  (1,)
    Values: [-0.30357293]
    Min:    -0.30357293062816576
    Max:    -0.30357293062816576
    has_posterior: False

    StatArray
    Name:   test ($\frac{g}{cc}$)
    Address:['0x140b9b2d0']
    Shape:  (10,)
    Values: [0. 1. 2. ... 7. 8. 9.]
    Min:    0.0
    Max:    9.0
    has_posterior: False

    StatArray
    Name:   test ($\frac{g}{cc}$)
    Address:['0x140b9b150']
    Shape:  (10,)
    Values: [0. 1. 2. ... 7. 8. 9.]
    Min:    0.0
    Max:    9.0
    has_posterior: False





.. GENERATED FROM PYTHON SOURCE LINES 67-86

Attaching Prior and Proposal Distributions to a StatArray
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The StatArray class has been built so that we may easily
attach not only names and units, but statistical distributions too.
We won't go into too much detail about the different distribution

Two types of distributions can be attached to the StatArray.

* Prior Distribution
    The prior represents how the user believes the variable should
    behave from a statistical standpoint.
    The values of the variable can be evaluated against the attached prior,
    to determine how likely they are to have occured https://en.wikipedia.org/wiki/Prior_probability

* Proposal Distribution
    The proposal describes a probability distribution from which to
    sample when we wish to perturb the variable
    https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm

.. GENERATED FROM PYTHON SOURCE LINES 86-98

.. code-block:: Python


    # Obtain an instantiation of a random number generator.
    # This is optional, but is an important consideration for parallel programming.
    from numpy.random import Generator
    from numpy.random import PCG64DXSM
    generator = PCG64DXSM(seed=0)
    prng = Generator(generator)

    Density = StatArray(10.0, name="test", units="$\frac{g}{cc}$")

    Density.prior = Distribution('Uniform', -2.0, 2.0, prng=prng)








.. GENERATED FROM PYTHON SOURCE LINES 99-100

We can also attach a proposal distribution

.. GENERATED FROM PYTHON SOURCE LINES 100-106

.. code-block:: Python

    Density.proposal = Distribution('Normal', 0.0, 1.0, prng=prng)
    print(Density.summary)
    print("Class type of the prior: ",type(Density.prior))
    print("Class type of the proposal: ",type(Density.proposal))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    StatArray
    Name:   test ($\frac{g}{cc}$)
    Address:['0x106d683d0' '0x13c904ec0' '0x13de4f810' ... '0x140b7ee40' '0x13de4f870'
     '0x13de4f8d0']
    Shape:  (1,)
    Values: [10.]
    Min:    10.0
    Max:    10.0
    Prior:
    |   Uniform Distribution: 
    |   Min: -2.0
    |   Max: 2.0
    Proposal:
    |   Normal
    |       Mean:0.0
    |   Variance:1.0
    has_posterior: False

    Class type of the prior:  <class 'geobipy.src.classes.statistics.UniformDistribution.Uniform'>
    Class type of the proposal:  <class 'geobipy.src.classes.statistics.NormalDistribution.Normal'>




.. GENERATED FROM PYTHON SOURCE LINES 107-110

The values in the variable can be evaluated against the prior.
In this case, we have 3 elements in the variable, and a univariate Normal for the prior.
Therefore each element is evaluated to get 3 probabilities, one for each element.

.. GENERATED FROM PYTHON SOURCE LINES 110-112

.. code-block:: Python

    print(Density.probability(log=False))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.0




.. GENERATED FROM PYTHON SOURCE LINES 113-114

The univariate proposal distribution can generate random samples from itself.

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: Python

    print(Density.propose())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.1375024404290368




.. GENERATED FROM PYTHON SOURCE LINES 117-119

From a sampling stand point we can either sample using only the proposal
Or we can only generate samples that simultaneously satisfy the prior.

.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: Python

    print(Density.propose(relative=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [10.53816627]




.. GENERATED FROM PYTHON SOURCE LINES 122-123

We can perturb the variable by drawing from the attached proposal distribution.

.. GENERATED FROM PYTHON SOURCE LINES 123-127

.. code-block:: Python


    Density.perturb()
    print(Density.summary)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    StatArray
    Name:   test ($\frac{g}{cc}$)
    Address:['0x106d683d0' '0x13c904ec0' '0x13de4f810' ... '0x140b7ee40' '0x13de4f870'
     '0x13de4f8d0']
    Shape:  (1,)
    Values: [0.38188467]
    Min:    0.38188466718060166
    Max:    0.38188466718060166
    Prior:
    |   Uniform Distribution: 
    |   Min: -2.0
    |   Max: 2.0
    Proposal:
    |   Normal
    |       Mean:0.0
    |   Variance:1.0
    has_posterior: False





.. GENERATED FROM PYTHON SOURCE LINES 128-133

Attaching a Histogram to capture the posterior distribution
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
The StatArray can perturb itself, evaluate its current probability given its priors
and a histogram can be attached to capture its posterior distribution.
As an example, lets create a Histogram class with bins generated from the prior.

.. GENERATED FROM PYTHON SOURCE LINES 133-134

.. code-block:: Python

    bins = Density.prior.bins()







.. GENERATED FROM PYTHON SOURCE LINES 135-136

Attach the histogram

.. GENERATED FROM PYTHON SOURCE LINES 136-138

.. code-block:: Python

    Density.posterior = Histogram(mesh = RectilinearMesh1D(edges=bins))








.. GENERATED FROM PYTHON SOURCE LINES 139-140

In an iterative sense, we can propose and evaluate new values, and update the posterior

.. GENERATED FROM PYTHON SOURCE LINES 140-147

.. code-block:: Python

    for i in range(1000):
        Density.perturb()
        p = Density.probability(log=False)

        if p > 0.0: # This is a simple example!
            Density.update_posterior()








.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: Python

    plt.figure()
    Density.summaryPlot()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_001.png
   :alt: Prior, Proposal, Posterior
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 152-156

Attach a multivariate normal distribution as the prior and proposal
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Attach the multivariate prior

.. GENERATED FROM PYTHON SOURCE LINES 156-162

.. code-block:: Python


    mean = np.random.randn(Density.size)
    variance = np.ones(Density.size)
    Density.prior = Distribution('MvNormal', mean, variance, prng=prng)









.. GENERATED FROM PYTHON SOURCE LINES 163-166

Since the prior is multivariate, the appropriate equations are used to
evaluate the probability for all elements in the StatArray.
This produces a single probability.

.. GENERATED FROM PYTHON SOURCE LINES 166-169

.. code-block:: Python


    print(Density.probability(log=False))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.3796768180063585




.. GENERATED FROM PYTHON SOURCE LINES 170-171

Attach the multivariate proposal

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: Python


    mean = np.random.randn(Density.size)
    variance = np.ones(Density.size)
    Density.proposal = Distribution('MvNormal', mean, variance, prng=prng)









.. GENERATED FROM PYTHON SOURCE LINES 178-179

Perturb the variables using the multivariate proposal.

.. GENERATED FROM PYTHON SOURCE LINES 179-194

.. code-block:: Python


    Density.perturb()
    Density.summary

    with h5py.File('statarray.h5', 'w') as f:
        Density.createHdf(f, 'statarray', withPosterior=True, add_axis=3)
        Density.writeHdf(f, 'statarray', withPosterior=True, index=0)

    with h5py.File('statarray.h5', 'r') as f:
        tmp = StatArray.fromHdf(f, 'statarray', index=0, skip_posterior=False)

    with h5py.File('statarray.h5', 'r') as f:
        tmp = StatArray.fromHdf(f, 'statarray', skip_posterior=False)









.. GENERATED FROM PYTHON SOURCE LINES 195-206

Basic manipulation
++++++++++++++++++

The StatArray contains other functions to perform basic array manipulations

These routines essentially wrap around numpy functions,
but the result will have the same name and units,
and if any prior or proposal are set, those will be carried through too.

1D example
__________

.. GENERATED FROM PYTHON SOURCE LINES 206-210

.. code-block:: Python


    x = StatArray(-np.cumsum(np.arange(10.0)))
    print(x)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ -0.  -1.  -3. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 211-216

.. code-block:: Python



    print(x.insert(i=[0, 9], values=[999.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [999.  -0.  -1. ... -36. 999. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 217-222

.. code-block:: Python



    print(x.prepend(999.0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [999.  -0.  -1. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 223-228

.. code-block:: Python



    print(x.prepend([998.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [998. 999.  -0. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 229-234

.. code-block:: Python



    print(x.append([998.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ -0.  -1.  -3. ... -45. 998. 999.]




.. GENERATED FROM PYTHON SOURCE LINES 235-240

.. code-block:: Python



    print(x.resize(14))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-0. -1. -3. ... -1. -3. -6.]




.. GENERATED FROM PYTHON SOURCE LINES 241-246

.. code-block:: Python



    print(x.delete([5,8]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ -0.  -1.  -3. ... -21. -28. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 247-252

.. code-block:: Python



    print(x.edges())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [  0.5  -0.5  -2.  ... -32.  -40.5 -49.5]




.. GENERATED FROM PYTHON SOURCE LINES 253-258

.. code-block:: Python



    print(x.internalEdges())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ -0.5  -2.   -4.5 ... -24.5 -32.  -40.5]




.. GENERATED FROM PYTHON SOURCE LINES 259-264

.. code-block:: Python



    print(x.firstNonZero())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1




.. GENERATED FROM PYTHON SOURCE LINES 265-270

.. code-block:: Python



    print(x.lastNonZero())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10




.. GENERATED FROM PYTHON SOURCE LINES 271-276

.. code-block:: Python



    print(x.abs())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 0.  1.  3. ... 28. 36. 45.]




.. GENERATED FROM PYTHON SOURCE LINES 277-279

2D example
__________

.. GENERATED FROM PYTHON SOURCE LINES 279-284

.. code-block:: Python


    x = StatArray(np.asarray([[0, -2, 3],[3, 0, -1],[1, 2, 0]]))
    print(x)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2  3]
     [ 3  0 -1]
     [ 1  2  0]]




.. GENERATED FROM PYTHON SOURCE LINES 285-290

.. code-block:: Python



    print(x.insert(i=0, values=4))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 4  4  4]
     [ 0 -2  3]
     [ 3  0 -1]
     [ 1  2  0]]




.. GENERATED FROM PYTHON SOURCE LINES 291-296

.. code-block:: Python



    print(x.insert(i=[2, 3], values=5, axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2  5  3  5]
     [ 3  0  5 -1  5]
     [ 1  2  5  0  5]]




.. GENERATED FROM PYTHON SOURCE LINES 297-302

.. code-block:: Python



    print(x.insert(i=2, values=[10, 11, 12], axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2 10  3]
     [ 3  0 11 -1]
     [ 1  2 12  0]]




.. GENERATED FROM PYTHON SOURCE LINES 303-308

.. code-block:: Python



    print(x.prepend(999))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[999 999 999]
     [  0  -2   3]
     [  3   0  -1]
     [  1   2   0]]




.. GENERATED FROM PYTHON SOURCE LINES 309-314

.. code-block:: Python



    print(x.prepend([999, 998, 997], axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[999 998 997   0  -2   3]
     [999 998 997   3   0  -1]
     [999 998 997   1   2   0]]




.. GENERATED FROM PYTHON SOURCE LINES 315-320

.. code-block:: Python



    print(x.append([[999, 998, 997]]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[  0  -2   3]
     [  3   0  -1]
     [  1   2   0]
     [999 998 997]]




.. GENERATED FROM PYTHON SOURCE LINES 321-326

.. code-block:: Python



    print(x.resize([5,5]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2  3  3  0]
     [-1  1  2  0  0]
     [-2  3  3  0 -1]
     [ 1  2  0  0 -2]
     [ 3  3  0 -1  1]]




.. GENERATED FROM PYTHON SOURCE LINES 327-332

.. code-block:: Python



    print(x.delete(5))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 0 -2  3 ...  1  2  0]




.. GENERATED FROM PYTHON SOURCE LINES 333-338

.. code-block:: Python



    print(x.delete(2, axis=0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2  3]
     [ 3  0 -1]]




.. GENERATED FROM PYTHON SOURCE LINES 339-344

.. code-block:: Python



    print(x.firstNonZero(axis=0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1 0 0]




.. GENERATED FROM PYTHON SOURCE LINES 345-350

.. code-block:: Python



    print(x.lastNonZero(axis=0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [3 3 2]




.. GENERATED FROM PYTHON SOURCE LINES 351-356

.. code-block:: Python



    print(x.firstNonZero(axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1 0 0]




.. GENERATED FROM PYTHON SOURCE LINES 357-362

.. code-block:: Python



    print(x.lastNonZero(axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [3 3 2]




.. GENERATED FROM PYTHON SOURCE LINES 363-368

.. code-block:: Python



    print(x.abs())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0 2 3]
     [3 0 1]
     [1 2 0]]




.. GENERATED FROM PYTHON SOURCE LINES 369-374

Plotting
++++++++

We can easily plot the StatArray with its built in plotting functions.
All plotting functions can take matplotlib keywords

.. GENERATED FROM PYTHON SOURCE LINES 374-382

.. code-block:: Python


    # The simplest is to just plot the array

    Density = StatArray(np.random.randn(100),name="Density",units="$\frac{g}{cc}$")
    Time = StatArray(np.linspace(0, 100, Density.size), name='Time', units='s')
    Depth = StatArray(np.random.exponential(size=Density.size), name='Depth', units='m')









.. GENERATED FROM PYTHON SOURCE LINES 383-388

.. code-block:: Python



    plt.figure()
    _ = Density.plot(linewidth=0.5, marker='x', markersize=1.0)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_002.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 389-390

We can quickly plot a bar graph.

.. GENERATED FROM PYTHON SOURCE LINES 390-395

.. code-block:: Python


    plt.figure()
    _ = Density.bar()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_003.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 396-397

We can scatter the contents of the StatArray if it is 1D

.. GENERATED FROM PYTHON SOURCE LINES 397-402

.. code-block:: Python


    plt.figure()
    _ = Density.scatter(alpha=0.7)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_004.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 403-410

Histogram Equalization
______________________

A neat trick with colourmaps is histogram equalization.
This approach forces all colours in the images to have an equal weight.
This distorts the colour bar, but can really highlight the lower and higher
ends of whatever you are plotting. Just add the equalize keyword!

.. GENERATED FROM PYTHON SOURCE LINES 410-415

.. code-block:: Python


    plt.figure()
    _ = Density.scatter(alpha=0.7, equalize=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_005.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 416-419

Take the log base(x) of the data

We can also take the data to a log, log10, log2, or a custom number!

.. GENERATED FROM PYTHON SOURCE LINES 419-423

.. code-block:: Python


    plt.figure()
    _ = Density.scatter(alpha=0.7,edgecolor='k',log='e') # could also use log='e', log=2, log=x) where x is the base you require




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_006.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 424-427

X and Y axes

We can specify the x axis of the scatter plot.

.. GENERATED FROM PYTHON SOURCE LINES 427-433

.. code-block:: Python



    plt.figure()
    _ = Density.scatter(x=Time, alpha=0.7, edgecolor='k')





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_007.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 434-441

Notice that I never specified the y axis, so the y axis defaulted to the values in the StatArray.
In this case, any operations applied to the colours, are also applied to the y axis, e.g. log=10.
When I take the values of Density to log base 10, because I do not specify the y plotting locations, those locations are similarly affected.

I can however force the y co-ordinates by specifying it as input.
In the second subplot I explicitly plot distance on the y axis.
In the first subplot, the y axis is the same as the colourbar.

.. GENERATED FROM PYTHON SOURCE LINES 441-450

.. code-block:: Python



    plt.figure()
    ax1 = plt.subplot(211)
    Density.scatter(x=Time, alpha=0.7, edgecolor='k', log=10)
    plt.subplot(212, sharex=ax1)
    _ = Density.scatter(x=Time, y=Depth, alpha=0.7, edgecolor='k', log=10)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_008.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 451-454

Point sizes

Since the plotting functions take matplotlib keywords, I can also specify the size of each points.

.. GENERATED FROM PYTHON SOURCE LINES 456-471

.. code-block:: Python



    s = np.ceil(100*(np.abs(np.random.randn(Density.size))))
    plt.figure()
    plt.tight_layout()
    ax1 = plt.subplot(211)
    Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', legend_size=2)
    plt.subplot(212, sharex=ax1)
    #Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', sizeLegend=[1.0, 100, 200, 300])
    v = np.abs(Density)+1.0
    _ = Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', legend_size=[1.0, 100, 200, 300], log=10)







.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_009.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 472-473

Of course we can still take the log, or equalize the colour histogram

.. GENERATED FROM PYTHON SOURCE LINES 473-478

.. code-block:: Python


    plt.figure()
    _ = Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k',equalize=True,log=10)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_010.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 479-480

Typically pcolor only works with 2D arrays. The StatArray has a pcolor method that will pcolor a 1D array

.. GENERATED FROM PYTHON SOURCE LINES 480-492

.. code-block:: Python


    plt.figure()
    plt.subplot(221)
    Density.pcolor()
    plt.subplot(222)
    Density.pcolor(y=Time)
    plt.subplot(223)
    Density.pcolor(y=Time, flip=True)
    plt.subplot(224)
    _ = Density.pcolor(y=Time, log=10, equalize=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_011.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 493-496

We can add grid lines, and add opacity to each element in the pcolor image

This is useful if the colour values need to be scaled by another variable e.g. variance.

.. GENERATED FROM PYTHON SOURCE LINES 496-506

.. code-block:: Python



    plt.figure()
    plt.subplot(121)
    Density.pcolor(grid=True, cmap='jet')
    plt.subplot(122)
    a = np.linspace(1.0, 0.0, Density.size)
    _ = Density.pcolor(grid=True, alpha=a, cmap='jet')





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_012.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 507-508

We can plot a histogram of the StatArray

.. GENERATED FROM PYTHON SOURCE LINES 508-513

.. code-block:: Python


    plt.figure()
    _ = Density.hist(100)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_013.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 514-515

We can write the StatArray to a HDF5 file.  HDF5 files are binary files that can include compression.  They allow quick and easy access to parts of the file, and can also be written to and read from in parallel!

.. GENERATED FROM PYTHON SOURCE LINES 515-520

.. code-block:: Python


    with h5py.File('1Dtest.h5','w') as f:
        Density.toHdf(f,'test')









.. GENERATED FROM PYTHON SOURCE LINES 521-523

We can then read the StatArray from the file
Here x is a new variable, that is read in from the hdf5 file we just wrote.

.. GENERATED FROM PYTHON SOURCE LINES 523-530

.. code-block:: Python


    x = StatArray.fromHdf('1Dtest.h5', 'test')
    print('x has the same values as Density? ',np.all(x == Density))
    x[2] = 5.0 # Change one of the values in x
    print('x has its own memory allocated (not a reference/pointer)? ', id(x) != id(Density))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    x has the same values as Density?  True
    x has its own memory allocated (not a reference/pointer)?  True




.. GENERATED FROM PYTHON SOURCE LINES 531-532

We can also define a 2D array

.. GENERATED FROM PYTHON SOURCE LINES 532-537

.. code-block:: Python


    Density = StatArray(np.random.randn(50,100),"Density","$\frac{g}{cc}$")
    Density.summary






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    "StatArray\nName:   Density ($\\frac{g}{cc}$)\nAddress:['0x14c27bb50']\nShape:  (50, 100)\nValues: [[ 0.43031444  0.16747392 -1.02201373 ...  0.74153721  1.90862961\n  -1.96298093]\n [-1.14462562 -0.35617089 -0.26110976 ... -0.23504484  0.90603323\n   0.24712065]\n [-0.14957468  0.72207578 -0.88557489 ... -0.17089164 -0.17362076\n  -0.63489297]\n ...\n [-1.159864    0.20198017 -1.45020582 ... -0.09188611  0.51429009\n  -2.29873304]\n [ 0.05110857  0.16473781  0.39133135 ... -0.772846    1.47108002\n   0.36929033]\n [ 1.88347735 -0.83146739 -0.92242455 ... -0.48809595  1.23172139\n   1.86073707]]\nMin:    -4.160360372326481\nMax:    3.7432694562093096\nhas_posterior: False\n"



.. GENERATED FROM PYTHON SOURCE LINES 538-541

The StatArray Class's functions work whether it is 1D or 2D

We can still do a histogram

.. GENERATED FROM PYTHON SOURCE LINES 541-546

.. code-block:: Python


    plt.figure()
    _ = Density.hist()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_014.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 547-548

And we can use pcolor to plot the 2D array

.. GENERATED FROM PYTHON SOURCE LINES 548-553

.. code-block:: Python


    plt.figure()
    _ = Density.pcolor()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_015.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_015.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 554-557

The StatArray comes with extra plotting options

Here we specify the x and y axes for the 2D array using two other 1D StatArrays

.. GENERATED FROM PYTHON SOURCE LINES 557-564

.. code-block:: Python


    plt.figure()
    x = StatArray(np.arange(101),name='x Axis',units = 'mm')
    y = StatArray(np.arange(51),name='y Axis',units = 'elephants')
    _ = Density.pcolor(x=x, y=y)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_016.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_016.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 565-568

We can plot using a log10 scale, in this case, we have values that are less
than or equal to 0.0.  Plotting with the log option will by default mask any
of those values, and will let you know that it has done so!

.. GENERATED FROM PYTHON SOURCE LINES 568-573

.. code-block:: Python


    plt.figure()
    _ = Density.pcolor(x=x,y=y,log=2)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_017.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_017.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 574-578

A neat trick with colourmaps is histogram equalization.
This approach forces all colours in the image to have an equal amount.
This distorts the colours, but can really highlight the lower and higher
ends of whatever you are plotting

.. GENERATED FROM PYTHON SOURCE LINES 578-583

.. code-block:: Python


    plt.figure()
    _ = Density.pcolor(x=x, y=y, equalize=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_018.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_018.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 584-585

We can equalize the log10 plot too :)

.. GENERATED FROM PYTHON SOURCE LINES 585-590

.. code-block:: Python


    plt.figure()
    _ = Density.pcolor(x=x,y=y,equalize=True, log=10)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_019.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_019.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 591-592

We can add opacity to each pixel in the image

.. GENERATED FROM PYTHON SOURCE LINES 592-596

.. code-block:: Python


    a = StatArray(np.random.random(Density.shape), 'Opacity from 0.0 to 1.0')









.. GENERATED FROM PYTHON SOURCE LINES 597-608

.. code-block:: Python



    plt.figure()
    ax1 = plt.subplot(131)
    ax = Density.pcolor(x=x, y=y, flipY=True, linewidth=0.1, colorbar=False)
    plt.subplot(132, sharex=ax1, sharey=ax1)
    ax = Density.pcolor(x=x, y=y, alpha=a, flipY=True, linewidth=0.1, colorbar=False)
    plt.subplot(133, sharex=ax1, sharey=ax1)
    _ = a.pcolor(x=x, y=y, flipY=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_020.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_020.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 609-610

If the array potentially has a lot of white space around the edges, we can trim the image

.. GENERATED FROM PYTHON SOURCE LINES 610-622

.. code-block:: Python


    Density[:10, :] = 0.0
    Density[-10:, :] = 0.0
    Density[:, :10] = 0.0
    Density[:, -10:] = 0.0
    plt.figure()
    plt.subplot(121)
    Density.pcolor()
    plt.subplot(122)
    _ = Density.pcolor(trim=0.0)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_021.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_021.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 623-624

Create a stacked area plot of a 2D StatArray

.. GENERATED FROM PYTHON SOURCE LINES 624-634

.. code-block:: Python


    A = StatArray(np.abs(np.random.randn(13,100)), name='Variable', units="units")
    x = StatArray(np.arange(100),name='x Axis',units = 'mm')
    plt.figure()
    ax1 = plt.subplot(211)
    A.stackedAreaPlot(x=x, axis=1)
    plt.subplot(212, sharex=ax1)
    _ = A.stackedAreaPlot(x=x, i=np.s_[[1,3,4],:], axis=1, labels=['a','b','c'])

    plt.show()



.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_022.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_022.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.330 seconds)


.. _sphx_glr_download_examples_Statistics_plot_StatArray.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_StatArray.ipynb <plot_StatArray.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_StatArray.py <plot_StatArray.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_StatArray.zip <plot_StatArray.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
