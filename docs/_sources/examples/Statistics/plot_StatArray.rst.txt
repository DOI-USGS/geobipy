
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_StatArray.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Statistics_plot_StatArray.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_StatArray.py:


StatArray Class
----------------

Extends the numpy ndarray class to add extra attributes such as names, and
units, and allows us to attach statistical descriptors of the array.
The direct extension to numpy maintains speed and functionality of numpy arrays.

.. GENERATED FROM PYTHON SOURCE LINES 11-22

.. code-block:: default

    from geobipy import StatArray
    from geobipy import Histogram
    from geobipy import Distribution
    from geobipy.src.classes.mesh.RectilinearMesh1D import RectilinearMesh1D
    import numpy as np
    import matplotlib.pyplot as plt
    import h5py

    plt.style.use('seaborn-pastel')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/nfoks/codes/repositories/geobipy/documentation_source/source/examples/Statistics/plot_StatArray.py:19: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.
      plt.style.use('seaborn-pastel')




.. GENERATED FROM PYTHON SOURCE LINES 23-26

Instantiating a new StatArray class
+++++++++++++++++++++++++++++++++++


.. GENERATED FROM PYTHON SOURCE LINES 26-52

.. code-block:: default


    # Integer
    test = StatArray(1, name='1')
    print(test.summary)
    test = StatArray(10, name='10')
    print(test.summary)
    # tuple/Shape
    test = StatArray((2, 10), name='(2, 10)')
    print(test.summary)

    # float
    test = StatArray(45.454, name='45.454')
    print(test.summary)
    test = StatArray(np.float64(45.454), name='45.454')
    print(test.summary)

    # complex
    # test = StatArray(np.complex(0.0, 1.0), name='complex(0, 1)')

    # array
    Density = StatArray(np.random.randn(1), name="Density", units="$\frac{g}{cc}$")
    print(Density.summary)

    # The StatArray can take any numpy function that returns an array as an input.
    # The name and units of the variable can be assigned to the StatArray.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Name: 1 0x7ff592dfaec0
    Shape: (1,)
    Values: [0.]
    min: 0.0
    max: 0.0

    Name: 10 0x7ff592dfac40
    Shape: (10,)
    Values: [0. 0. 0. ... 0. 0. 0.]
    min: 0.0
    max: 0.0

    Name: (2, 10) 0x7ff592dfaec0
    Shape: (2, 10)
    Values: [[0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]]
    min: 0.0
    max: 0.0

    Name: 45.454 0x7ff592dfac40
    Shape: (1,)
    Values: [45.454]
    min: 45.454
    max: 45.454

    Name: 45.454 0x7ff592dfaec0
    Shape: (1,)
    Values: [45.454]
    min: 45.454
    max: 45.454

    Name: Density ($\frac{g}{cc}$) 0x7ff592df92c0
    Shape: (1,)
    Values: [0.08834802]
    min: 0.08834801506485813
    max: 0.08834801506485813





.. GENERATED FROM PYTHON SOURCE LINES 53-73

Attaching Prior and Proposal Distributions to a StatArray
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The StatArray class has been built so that we may easily
attach not only names and units, but statistical distributions too.
We won't go into too much detail about the different distribution
classes here so check out the :ref:`Distribution Class` for a better description.

Two types of distributions can be attached to the StatArray.

* Prior Distribution
    The prior represents how the user believes the variable should
    behave from a statistical standpoint.
    The values of the variable can be evaluated against the attached prior,
    to determine how likely they are to have occured https://en.wikipedia.org/wiki/Prior_probability

* Proposal Distribution
    The proposal describes a probability distribution from which to
    sample when we wish to perturb the variable
    https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm

.. GENERATED FROM PYTHON SOURCE LINES 73-79

.. code-block:: default


    # Obtain an instantiation of a random number generator.
    # This is optional, but is an important consideration for parallel programming.
    prng = np.random.RandomState()
    Density.prior = Distribution('Uniform', -2.0, 2.0, prng=prng)








.. GENERATED FROM PYTHON SOURCE LINES 80-81

We can also attach a proposal distribution

.. GENERATED FROM PYTHON SOURCE LINES 81-87

.. code-block:: default

    Density.proposal = Distribution('Normal', 0.0, 1.0, prng=prng)
    print(Density.summary)
    print("Class type of the prior: ",type(Density.prior))
    print("Class type of the proposal: ",type(Density.proposal))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Name: Density ($\frac{g}{cc}$) 0x7ff592df92c0
    Shape: (1,)
    Values: [0.08834802]
    min: 0.08834801506485813
    max: 0.08834801506485813
    Prior:
    |   Uniform Distribution: 
    |     Min: :-2.0
    |     Max: :2.0
    Proposal:
    |   Normal
    |       Mean:0.0
    |   Variance:1.0

    Class type of the prior:  <class 'geobipy.src.classes.statistics.UniformDistribution.Uniform'>
    Class type of the proposal:  <class 'geobipy.src.classes.statistics.NormalDistribution.Normal'>




.. GENERATED FROM PYTHON SOURCE LINES 88-91

The values in the variable can be evaluated against the prior.
In this case, we have 3 elements in the variable, and a univariate Normal for the prior.
Therefore each element is evaluated to get 3 probabilities, one for each element.

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: default

    print(Density.probability(log=False))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.25




.. GENERATED FROM PYTHON SOURCE LINES 94-95

The univariate proposal distribution can generate random samples from itself.

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: default

    print(Density.propose())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.9522526515446472




.. GENERATED FROM PYTHON SOURCE LINES 98-100

From a sampling stand point we can either sample using only the proposal
Or we can only generate samples that simultaneously satisfy the prior.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. code-block:: default

    print(Density.propose(relative=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-1.04811844]




.. GENERATED FROM PYTHON SOURCE LINES 103-104

We can perturb the variable by drawing from the attached proposal distribution.

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default


    Density.perturb()
    print(Density.summary)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Name: Density ($\frac{g}{cc}$) 0x7ff592df92c0
    Shape: (1,)
    Values: [-1.50540299]
    min: -1.505402988009392
    max: -1.505402988009392
    Prior:
    |   Uniform Distribution: 
    |     Min: :-2.0
    |     Max: :2.0
    Proposal:
    |   Normal
    |       Mean:0.0
    |   Variance:1.0





.. GENERATED FROM PYTHON SOURCE LINES 109-114

Attaching a Histogram to capture the posterior distribution
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
The StatArray can perturb itself, evaluate its current probability given its priors
and a histogram can be attached to capture its posterior distribution.
As an example, lets create a Histogram class with bins generated from the prior.

.. GENERATED FROM PYTHON SOURCE LINES 114-115

.. code-block:: default

    bins = Density.prior.bins()







.. GENERATED FROM PYTHON SOURCE LINES 116-117

Attach the histogram

.. GENERATED FROM PYTHON SOURCE LINES 117-119

.. code-block:: default

    Density.posterior = Histogram(mesh = RectilinearMesh1D(edges=bins))








.. GENERATED FROM PYTHON SOURCE LINES 120-121

In an iterative sense, we can propose and evaluate new values, and update the posterior

.. GENERATED FROM PYTHON SOURCE LINES 121-128

.. code-block:: default

    for i in range(1000):
        Density.perturb()
        p = Density.probability(log=False)

        if p > 0.0: # This is a simple example!
            Density.update_posterior()








.. GENERATED FROM PYTHON SOURCE LINES 129-132

.. code-block:: default

    plt.figure()
    Density.summaryPlot()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_001.png
   :alt: Prior, Proposal, Posterior
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-137

Attach a multivariate normal distribution as the prior and proposal
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Attach the multivariate prior

.. GENERATED FROM PYTHON SOURCE LINES 137-143

.. code-block:: default


    mean = np.random.randn(Density.size)
    variance = np.ones(Density.size)
    Density.prior = Distribution('MvNormal', mean, variance, prng=prng)









.. GENERATED FROM PYTHON SOURCE LINES 144-147

Since the prior is multivariate, the appropriate equations are used to
evaluate the probability for all elements in the StatArray.
This produces a single probability.

.. GENERATED FROM PYTHON SOURCE LINES 147-150

.. code-block:: default


    print(Density.probability(log=False))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.2563804488183801




.. GENERATED FROM PYTHON SOURCE LINES 151-152

Attach the multivariate proposal

.. GENERATED FROM PYTHON SOURCE LINES 152-158

.. code-block:: default


    mean = np.random.randn(Density.size)
    variance = np.ones(Density.size)
    Density.proposal = Distribution('MvNormal', mean, variance, prng=prng)









.. GENERATED FROM PYTHON SOURCE LINES 159-160

Perturb the variables using the multivariate proposal.

.. GENERATED FROM PYTHON SOURCE LINES 160-175

.. code-block:: default


    Density.perturb()
    Density.summary

    with h5py.File('statarray.h5', 'w') as f:
        Density.createHdf(f, 'statarray', withPosterior=True, add_axis=3)
        Density.writeHdf(f, 'statarray', withPosterior=True, index=0)

    with h5py.File('statarray.h5', 'r') as f:
        tmp = StatArray.fromHdf(f, 'statarray', index=0, skip_posterior=False)

    with h5py.File('statarray.h5', 'r') as f:
        tmp = StatArray.fromHdf(f, 'statarray', skip_posterior=False)









.. GENERATED FROM PYTHON SOURCE LINES 176-187

Basic manipulation
++++++++++++++++++

The StatArray contains other functions to perform basic array manipulations

These routines essentially wrap around numpy functions,
but the result will have the same name and units,
and if any prior or proposal are set, those will be carried through too.

1D example
__________

.. GENERATED FROM PYTHON SOURCE LINES 187-191

.. code-block:: default


    x = StatArray(-np.cumsum(np.arange(10.0)))
    print(x)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ -0.  -1.  -3. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 192-197

.. code-block:: default



    print(x.insert(i=[0, 9], values=[999.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'list'>
    [999.  -0.  -1. ... -36. 999. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 198-203

.. code-block:: default



    print(x.prepend(999.0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    [999.  -0.  -1. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 204-209

.. code-block:: default



    print(x.prepend([998.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    [998. 999.  -0. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 210-215

.. code-block:: default



    print(x.append([998.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'int'>
    [ -0.  -1.  -3. ... -45. 998. 999.]




.. GENERATED FROM PYTHON SOURCE LINES 216-221

.. code-block:: default



    print(x.resize(14))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [-0. -1. -3. ... -1. -3. -6.]




.. GENERATED FROM PYTHON SOURCE LINES 222-227

.. code-block:: default



    print(x.delete([5,8]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ -0.  -1.  -3. ... -21. -28. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 228-233

.. code-block:: default



    print(x.edges())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [  0.5  -0.5  -2.  ... -32.  -40.5 -49.5]




.. GENERATED FROM PYTHON SOURCE LINES 234-239

.. code-block:: default



    print(x.internalEdges())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ -0.5  -2.   -4.5 ... -24.5 -32.  -40.5]




.. GENERATED FROM PYTHON SOURCE LINES 240-245

.. code-block:: default



    print(x.firstNonZero())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1




.. GENERATED FROM PYTHON SOURCE LINES 246-251

.. code-block:: default



    print(x.lastNonZero())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    10




.. GENERATED FROM PYTHON SOURCE LINES 252-257

.. code-block:: default



    print(x.abs())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 0.  1.  3. ... 28. 36. 45.]




.. GENERATED FROM PYTHON SOURCE LINES 258-260

2D example
__________

.. GENERATED FROM PYTHON SOURCE LINES 260-265

.. code-block:: default


    x = StatArray(np.asarray([[0, -2, 3],[3, 0, -1],[1, 2, 0]]))
    print(x)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2  3]
     [ 3  0 -1]
     [ 1  2  0]]




.. GENERATED FROM PYTHON SOURCE LINES 266-271

.. code-block:: default



    print(x.insert(i=0, values=4))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'int'>
    [[ 4  4  4]
     [ 0 -2  3]
     [ 3  0 -1]
     [ 1  2  0]]




.. GENERATED FROM PYTHON SOURCE LINES 272-277

.. code-block:: default



    print(x.insert(i=[2, 3], values=5, axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'list'>
    [[ 0 -2  5  3  5]
     [ 3  0  5 -1  5]
     [ 1  2  5  0  5]]




.. GENERATED FROM PYTHON SOURCE LINES 278-283

.. code-block:: default



    print(x.insert(i=2, values=[10, 11, 12], axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'int'>
    [[ 0 -2 10  3]
     [ 3  0 11 -1]
     [ 1  2 12  0]]




.. GENERATED FROM PYTHON SOURCE LINES 284-289

.. code-block:: default



    print(x.prepend(999))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    [[999 999 999]
     [  0  -2   3]
     [  3   0  -1]
     [  1   2   0]]




.. GENERATED FROM PYTHON SOURCE LINES 290-295

.. code-block:: default



    print(x.prepend([999, 998, 997], axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    [[999 998 997   0  -2   3]
     [999 998 997   3   0  -1]
     [999 998 997   1   2   0]]




.. GENERATED FROM PYTHON SOURCE LINES 296-301

.. code-block:: default



    print(x.append([[999, 998, 997]]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'int'>
    [[  0  -2   3]
     [  3   0  -1]
     [  1   2   0]
     [999 998 997]]




.. GENERATED FROM PYTHON SOURCE LINES 302-307

.. code-block:: default



    print(x.resize([5,5]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2  3  3  0]
     [-1  1  2  0  0]
     [-2  3  3  0 -1]
     [ 1  2  0  0 -2]
     [ 3  3  0 -1  1]]




.. GENERATED FROM PYTHON SOURCE LINES 308-313

.. code-block:: default



    print(x.delete(5))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 0 -2  3 ...  1  2  0]




.. GENERATED FROM PYTHON SOURCE LINES 314-319

.. code-block:: default



    print(x.delete(2, axis=0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 0 -2  3]
     [ 3  0 -1]]




.. GENERATED FROM PYTHON SOURCE LINES 320-325

.. code-block:: default



    print(x.firstNonZero(axis=0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1 0 0]




.. GENERATED FROM PYTHON SOURCE LINES 326-331

.. code-block:: default



    print(x.lastNonZero(axis=0))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [3 3 2]




.. GENERATED FROM PYTHON SOURCE LINES 332-337

.. code-block:: default



    print(x.firstNonZero(axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1 0 0]




.. GENERATED FROM PYTHON SOURCE LINES 338-343

.. code-block:: default



    print(x.lastNonZero(axis=1))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [3 3 2]




.. GENERATED FROM PYTHON SOURCE LINES 344-349

.. code-block:: default



    print(x.abs())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0 2 3]
     [3 0 1]
     [1 2 0]]




.. GENERATED FROM PYTHON SOURCE LINES 350-355

Plotting
++++++++

We can easily plot the StatArray with its built in plotting functions.
All plotting functions can take matplotlib keywords

.. GENERATED FROM PYTHON SOURCE LINES 355-363

.. code-block:: default


    # The simplest is to just plot the array

    Density = StatArray(np.random.randn(100),name="Density",units="$\frac{g}{cc}$")
    Time = StatArray(np.linspace(0, 100, Density.size), name='Time', units='s')
    Depth = StatArray(np.random.exponential(size=Density.size), name='Depth', units='m')









.. GENERATED FROM PYTHON SOURCE LINES 364-369

.. code-block:: default



    plt.figure()
    _ = Density.plot(linewidth=0.5, marker='x', markersize=1.0)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_002.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 370-371

We can quickly plot a bar graph.

.. GENERATED FROM PYTHON SOURCE LINES 371-376

.. code-block:: default


    plt.figure()
    _ = Density.bar()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_003.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 377-378

We can scatter the contents of the StatArray if it is 1D

.. GENERATED FROM PYTHON SOURCE LINES 378-383

.. code-block:: default


    plt.figure()
    _ = Density.scatter(alpha=0.7)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_004.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 384-391

Histogram Equalization
______________________

A neat trick with colourmaps is histogram equalization.
This approach forces all colours in the images to have an equal weight.
This distorts the colour bar, but can really highlight the lower and higher
ends of whatever you are plotting. Just add the equalize keyword!

.. GENERATED FROM PYTHON SOURCE LINES 391-396

.. code-block:: default


    plt.figure()
    _ = Density.scatter(alpha=0.7, equalize=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_005.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 397-400

Take the log base(x) of the data

We can also take the data to a log, log10, log2, or a custom number!

.. GENERATED FROM PYTHON SOURCE LINES 400-404

.. code-block:: default


    plt.figure()
    _ = Density.scatter(alpha=0.7,edgecolor='k',log='e') # could also use log='e', log=2, log=x) where x is the base you require




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_006.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 405-408

X and Y axes

We can specify the x axis of the scatter plot.

.. GENERATED FROM PYTHON SOURCE LINES 408-414

.. code-block:: default



    plt.figure()
    _ = Density.scatter(x=Time, alpha=0.7, edgecolor='k')





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_007.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 415-422

Notice that I never specified the y axis, so the y axis defaulted to the values in the StatArray.
In this case, any operations applied to the colours, are also applied to the y axis, e.g. log=10.
When I take the values of Density to log base 10, because I do not specify the y plotting locations, those locations are similarly affected.

I can however force the y co-ordinates by specifying it as input.
In the second subplot I explicitly plot distance on the y axis.
In the first subplot, the y axis is the same as the colourbar.

.. GENERATED FROM PYTHON SOURCE LINES 422-431

.. code-block:: default



    plt.figure()
    ax1 = plt.subplot(211)
    Density.scatter(x=Time, alpha=0.7, edgecolor='k', log=10)
    plt.subplot(212, sharex=ax1)
    _ = Density.scatter(x=Time, y=Depth, alpha=0.7, edgecolor='k', log=10)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_008.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 432-435

Point sizes

Since the plotting functions take matplotlib keywords, I can also specify the size of each points.

.. GENERATED FROM PYTHON SOURCE LINES 437-452

.. code-block:: default



    s = np.ceil(100*(np.abs(np.random.randn(Density.size))))
    plt.figure()
    plt.tight_layout()
    ax1 = plt.subplot(211)
    Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', legend_size=2)
    plt.subplot(212, sharex=ax1)
    #Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', sizeLegend=[1.0, 100, 200, 300])
    v = np.abs(Density)+1.0
    _ = Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', legend_size=[1.0, 100, 200, 300], log=10)







.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_009.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 453-454

Of course we can still take the log, or equalize the colour histogram

.. GENERATED FROM PYTHON SOURCE LINES 454-459

.. code-block:: default


    plt.figure()
    _ = Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k',equalize=True,log=10)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_010.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 460-461

Typically pcolor only works with 2D arrays. The StatArray has a pcolor method that will pcolor a 1D array

.. GENERATED FROM PYTHON SOURCE LINES 461-473

.. code-block:: default


    plt.figure()
    plt.subplot(221)
    Density.pcolor()
    plt.subplot(222)
    Density.pcolor(y=Time)
    plt.subplot(223)
    Density.pcolor(y=Time, flip=True)
    plt.subplot(224)
    _ = Density.pcolor(y=Time, log=10, equalize=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_011.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 474-477

We can add grid lines, and add opacity to each element in the pcolor image

This is useful if the colour values need to be scaled by another variable e.g. variance.

.. GENERATED FROM PYTHON SOURCE LINES 477-487

.. code-block:: default



    plt.figure()
    plt.subplot(121)
    Density.pcolor(grid=True, cmap='jet')
    plt.subplot(122)
    a = np.linspace(1.0, 0.0, Density.size)
    _ = Density.pcolor(grid=True, alpha=a, cmap='jet')





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_012.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 488-489

We can plot a histogram of the StatArray

.. GENERATED FROM PYTHON SOURCE LINES 489-494

.. code-block:: default


    plt.figure()
    _ = Density.hist(100)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_013.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 495-496

We can write the StatArray to a HDF5 file.  HDF5 files are binary files that can include compression.  They allow quick and easy access to parts of the file, and can also be written to and read from in parallel!

.. GENERATED FROM PYTHON SOURCE LINES 496-501

.. code-block:: default


    with h5py.File('1Dtest.h5','w') as f:
        Density.toHdf(f,'test')









.. GENERATED FROM PYTHON SOURCE LINES 502-504

We can then read the StatArray from the file
Here x is a new variable, that is read in from the hdf5 file we just wrote.

.. GENERATED FROM PYTHON SOURCE LINES 504-511

.. code-block:: default


    x = StatArray.fromHdf('1Dtest.h5', 'test')
    print('x has the same values as Density? ',np.all(x == Density))
    x[2] = 5.0 # Change one of the values in x
    print('x has its own memory allocated (not a reference/pointer)? ', id(x) != id(Density))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    x has the same values as Density?  True
    x has its own memory allocated (not a reference/pointer)?  True




.. GENERATED FROM PYTHON SOURCE LINES 512-513

We can also define a 2D array

.. GENERATED FROM PYTHON SOURCE LINES 513-518

.. code-block:: default


    Density = StatArray(np.random.randn(50,100),"Density","$\frac{g}{cc}$")
    Density.summary






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'Name: Density ($\\frac{g}{cc}$) 0x7ff5943e37c0\nShape: (50, 100)\nValues: [[-2.08786155  0.27155668  0.03927888 ...  2.54183531  1.69447203\n  -1.89190848]\n [ 0.85614344  0.32860765 -0.20147734 ... -0.82957808  1.21062439\n   0.1673818 ]\n [-0.63252696  0.22178405  1.87088588 ... -0.56340323 -0.03561543\n   0.86021205]\n ...\n [-0.56087003 -0.14362854  0.5289713  ... -0.55293387  0.09398317\n   1.89985743]\n [-0.7974982   0.85717802  0.78106984 ... -1.51512074  0.31074689\n  -0.83252381]\n [ 0.32736813 -0.04333445  0.41172788 ...  0.21826993 -1.0704939\n  -0.27108376]]\nmin: -3.6890137097705016\nmax: 3.889764884052127\n'



.. GENERATED FROM PYTHON SOURCE LINES 519-522

The StatArray Class's functions work whether it is 1D or 2D

We can still do a histogram

.. GENERATED FROM PYTHON SOURCE LINES 522-527

.. code-block:: default


    plt.figure()
    _ = Density.hist()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_014.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 528-529

And we can use pcolor to plot the 2D array

.. GENERATED FROM PYTHON SOURCE LINES 529-534

.. code-block:: default


    plt.figure()
    _ = Density.pcolor()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_015.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_015.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 535-538

The StatArray comes with extra plotting options

Here we specify the x and y axes for the 2D array using two other 1D StatArrays

.. GENERATED FROM PYTHON SOURCE LINES 538-545

.. code-block:: default


    plt.figure()
    x = StatArray(np.arange(101),name='x Axis',units = 'mm')
    y = StatArray(np.arange(51),name='y Axis',units = 'elephants')
    _ = Density.pcolor(x=x, y=y)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_016.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_016.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 546-549

We can plot using a log10 scale, in this case, we have values that are less
than or equal to 0.0.  Plotting with the log option will by default mask any
of those values, and will let you know that it has done so!

.. GENERATED FROM PYTHON SOURCE LINES 549-554

.. code-block:: default


    plt.figure()
    _ = Density.pcolor(x=x,y=y,log=2)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_017.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_017.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 555-559

A neat trick with colourmaps is histogram equalization.
This approach forces all colours in the image to have an equal amount.
This distorts the colours, but can really highlight the lower and higher
ends of whatever you are plotting

.. GENERATED FROM PYTHON SOURCE LINES 559-564

.. code-block:: default


    plt.figure()
    _ = Density.pcolor(x=x, y=y, equalize=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_018.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_018.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 565-566

We can equalize the log10 plot too :)

.. GENERATED FROM PYTHON SOURCE LINES 566-571

.. code-block:: default


    plt.figure()
    _ = Density.pcolor(x=x,y=y,equalize=True, log=10)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_019.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_019.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 572-573

We can add opacity to each pixel in the image

.. GENERATED FROM PYTHON SOURCE LINES 573-577

.. code-block:: default


    a = StatArray(np.random.random(Density.shape), 'Opacity from 0.0 to 1.0')









.. GENERATED FROM PYTHON SOURCE LINES 578-589

.. code-block:: default



    plt.figure()
    ax1 = plt.subplot(131)
    ax = Density.pcolor(x=x, y=y, flipY=True, linewidth=0.1, colorbar=False)
    plt.subplot(132, sharex=ax1, sharey=ax1)
    ax = Density.pcolor(x=x, y=y, alpha=a, flipY=True, linewidth=0.1, colorbar=False)
    plt.subplot(133, sharex=ax1, sharey=ax1)
    _ = a.pcolor(x=x, y=y, flipY=True)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_020.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_020.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 590-591

If the array potentially has a lot of white space around the edges, we can trim the image

.. GENERATED FROM PYTHON SOURCE LINES 591-603

.. code-block:: default


    Density[:10, :] = 0.0
    Density[-10:, :] = 0.0
    Density[:, :10] = 0.0
    Density[:, -10:] = 0.0
    plt.figure()
    plt.subplot(121)
    Density.pcolor()
    plt.subplot(122)
    _ = Density.pcolor(trim=0.0)





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_021.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_021.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 604-605

Create a stacked area plot of a 2D StatArray

.. GENERATED FROM PYTHON SOURCE LINES 605-615

.. code-block:: default


    A = StatArray(np.abs(np.random.randn(13,100)), name='Variable', units="units")
    x = StatArray(np.arange(100),name='x Axis',units = 'mm')
    plt.figure()
    ax1 = plt.subplot(211)
    A.stackedAreaPlot(x=x, axis=1)
    plt.subplot(212, sharex=ax1)
    _ = A.stackedAreaPlot(x=x, i=np.s_[[1,3,4],:], axis=1, labels=['a','b','c'])

    plt.show()



.. image-sg:: /examples/Statistics/images/sphx_glr_plot_StatArray_022.png
   :alt: plot StatArray
   :srcset: /examples/Statistics/images/sphx_glr_plot_StatArray_022.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.278 seconds)


.. _sphx_glr_download_examples_Statistics_plot_StatArray.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_StatArray.py <plot_StatArray.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_StatArray.ipynb <plot_StatArray.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
