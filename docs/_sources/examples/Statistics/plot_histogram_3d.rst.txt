
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_histogram_3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Statistics_plot_histogram_3d.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_histogram_3d.py:


Histogram 3D
------------

This 3D histogram class allows efficient updating of histograms, plotting and
saving as HDF5.

.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: Python

    import geobipy
    from geobipy import StatArray
    from geobipy import Histogram
    import matplotlib.pyplot as plt
    from geobipy import RectilinearMesh3D
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 20-21

Create some histogram bins in x and y

.. GENERATED FROM PYTHON SOURCE LINES 21-27

.. code-block:: Python

    x = StatArray(np.linspace(-4.0, 4.0, 11), 'Variable 1')
    y = StatArray(np.linspace(-4.0, 4.0, 21), 'Variable 2')
    z = StatArray(np.linspace(-4.0, 4.0, 31), 'Variable 3')

    mesh = RectilinearMesh3D(x_edges=x, y_edges=y, z_edges=z)








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: Python

    H = Histogram(mesh=mesh)








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 33-39

.. code-block:: Python

    a = np.random.randn(100000)
    b = np.random.randn(100000)
    c = np.random.randn(100000)
    # x = np.asarray([a, b, c])









.. GENERATED FROM PYTHON SOURCE LINES 40-41

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 41-43

.. code-block:: Python

    H.update(a, b, c)








.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: Python

    plt.figure()
    plt.suptitle("Slice half way along each dimension")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        s = [5 if i  == axis else np.s_[:] for i in range(3)]
        _ = H[tuple(s)].pcolor(cmap='gray_r')




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_001.png
   :alt: Slice half way along each dimension
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-53

Generate marginal histograms along an axis

.. GENERATED FROM PYTHON SOURCE LINES 53-60

.. code-block:: Python

    plt.figure()
    plt.suptitle("Marginals along each axis")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        _ = H.marginalize(axis=axis).plot()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_002.png
   :alt: Marginals along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-62

Take the mean estimate from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: Python

    plt.figure()
    plt.suptitle("Mean along each axis")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        _ = H.mean(axis=axis).pcolor()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_003.png
   :alt: Mean along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-70

Take the median estimate from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 70-100

.. code-block:: Python

    plt.figure()
    plt.suptitle("Median along each axis")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        _ = H.median(axis=axis).pcolor()

    # #%%
    # # We can map the credible range to an opacity or transparency
    # H.opacity()
    # H.transparency()

    H.animate(0, 'test.mp4')

    H.to_vtk('h3d.vtk')




    # Create some histogram bins in x and y
    xx, yy = np.meshgrid(mesh.z.centres, mesh.y.centres)
    x_re = StatArray(np.sin(np.sqrt(xx ** 2.0 + yy ** 2.0)), "x_re")

    xx, yy = np.meshgrid(mesh.z.centres, mesh.x.centres)
    y_re = StatArray(np.sin(np.sqrt(xx ** 2.0 + yy ** 2.0)), "y_re")

    xx, yy = np.meshgrid(mesh.y.centres, mesh.x.centres)
    z_re = StatArray(np.sin(np.sqrt(xx ** 2.0 + yy ** 2.0)), "z_re")

    mesh = RectilinearMesh3D(x_edges=x, x_relative_to=x_re, y_edges=y, y_relative_to=y_re, z_edges=z, z_relative_to=z_re)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_004.png
         :alt: Median along each axis
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_005.png
         :alt: 3.60
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_005.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 101-102

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 102-104

.. code-block:: Python

    H = Histogram(mesh=mesh)








.. GENERATED FROM PYTHON SOURCE LINES 105-106

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 106-111

.. code-block:: Python

    a = np.random.randn(100000)
    b = np.random.randn(100000)
    c = np.random.randn(100000)
    # x = np.asarray([a, b, c])








.. GENERATED FROM PYTHON SOURCE LINES 112-113

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 113-115

.. code-block:: Python

    H.update(a, b, c)








.. GENERATED FROM PYTHON SOURCE LINES 116-123

.. code-block:: Python

    plt.figure()
    plt.suptitle("Slice half way along each dimension")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        s = [5 if i  == axis else np.s_[:] for i in range(3)]
        _ = H[tuple(s)].pcolor(cmap='gray_r')




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_006.png
   :alt: Slice half way along each dimension
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-125

Generate marginal histograms along an axis

.. GENERATED FROM PYTHON SOURCE LINES 125-132

.. code-block:: Python

    plt.figure()
    plt.suptitle("Marginals along each axis")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        _ = H.marginalize(axis=axis).plot()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_007.png
   :alt: Marginals along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-134

Take the mean estimate from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 134-140

.. code-block:: Python

    plt.figure()
    plt.suptitle("Mean along each axis")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        _ = H.mean(axis=axis).pcolor()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_008.png
   :alt: Mean along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 141-142

Take the median estimate from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 142-158

.. code-block:: Python

    plt.figure()
    plt.suptitle("Median along each axis")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        _ = H.median(axis=axis).pcolor()

    # #%%
    # # We can map the credible range to an opacity or transparency
    # H.opacity()
    # H.transparency()

    H.animate(0, 'test.mp4')

    plt.show()

    H.to_vtk('h3d.vtk')



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_009.png
         :alt: Median along each axis
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_010.png
         :alt: 3.60
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_3d_010.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.648 seconds)


.. _sphx_glr_download_examples_Statistics_plot_histogram_3d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_histogram_3d.ipynb <plot_histogram_3d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_histogram_3d.py <plot_histogram_3d.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
