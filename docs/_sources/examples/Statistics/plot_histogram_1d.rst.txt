
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_histogram_1d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Statistics_plot_histogram_1d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_histogram_1d.py:


Histogram 1D
------------

This histogram class allows efficient updating of histograms, plotting and
saving as HDF5

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default

    from geobipy.src.classes.mesh.RectilinearMesh1D import RectilinearMesh1D
    import h5py
    from geobipy import StatArray
    from geobipy import Histogram
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 18-20

Histogram with regular bins
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default


    # Create regularly spaced bins
    mesh = RectilinearMesh1D(edges=StatArray(np.linspace(-3.0, 3.0, 101), 'bins', 'm'))








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Set the histogram using the bins, and update

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    H = Histogram(mesh=mesh)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

We can update the histogram with some new values

.. GENERATED FROM PYTHON SOURCE LINES 30-43

.. code-block:: default

    H.update(np.random.randn(1000), trim=True)

    # Plot the histogram
    plt.figure()
    plt.subplot(221)
    _ = H.plot()
    plt.subplot(222)
    _ = H.pdf.bar()
    plt.subplot(223)
    H.pmf.bar()
    plt.subplot(224)
    H.cdf().bar()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_1d_001.png
   :alt: plot histogram 1d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_1d_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot: xlabel='bins (m)', ylabel='Cumulative Density Function'>



.. GENERATED FROM PYTHON SOURCE LINES 44-45

Get the median, and 95% confidence values

.. GENERATED FROM PYTHON SOURCE LINES 45-53

.. code-block:: default

    print(H.credible_intervals(percent=95.0))

    plt.figure()
    H.plot()
    H.plotCredibleIntervals()
    H.plotMean()
    H.plotMedian()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_1d_002.png
   :alt: plot histogram 1d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_1d_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (0.09000000000000008, -1.95, 1.71)




.. GENERATED FROM PYTHON SOURCE LINES 54-56

Histogram with irregular bins
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default


    # Create irregularly spaced bins
    x = np.cumsum(np.arange(10, dtype=np.float64))
    irregularBins = np.hstack([-x[::-1], x[1:]])








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Create a named StatArray

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default

    edges = StatArray(irregularBins, 'irregular bins')
    mesh = RectilinearMesh1D(edges = edges)








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Instantiate the histogram with bin edges

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    H = Histogram(mesh=mesh)








.. GENERATED FROM PYTHON SOURCE LINES 71-72

Update the histogram

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: default

    H.update((np.random.randn(10000)*20.0) - 10.0)








.. GENERATED FROM PYTHON SOURCE LINES 75-76

Plot the histogram

.. GENERATED FROM PYTHON SOURCE LINES 76-88

.. code-block:: default

    plt.figure()
    plt.subplot(211)
    _ = H.plot()
    plt.subplot(212)
    _ = H.plot(normalize=True)

    plt.figure()
    H.plot()
    H.plotCredibleIntervals()
    H.plotMean()
    H.plotMedian()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_1d_003.png
         :alt: plot histogram 1d
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_1d_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_1d_004.png
         :alt: plot histogram 1d
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_1d_004.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 89-90

We can plot the histogram as a pcolor plot

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: default

    plt.figure()
    _ = H.pcolor(grid=True, transpose=True)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_1d_005.png
   :alt: plot histogram 1d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_1d_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-97

Histogram with linear space entries that are logged internally
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Create some bins spaced logarithmically

.. GENERATED FROM PYTHON SOURCE LINES 97-99

.. code-block:: default

    mesh = RectilinearMesh1D(edges = StatArray(np.logspace(-5, 3), 'positive bins'), log=10)








.. GENERATED FROM PYTHON SOURCE LINES 100-101

Instantiate the Histogram with log=10

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    H = Histogram(mesh)








.. GENERATED FROM PYTHON SOURCE LINES 104-105

The update takes in the numbers in linear space and takes their log=10

.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    H.update(10.0**(np.random.randn(1000)*2.0), trim=True)








.. GENERATED FROM PYTHON SOURCE LINES 108-123

.. code-block:: default

    plt.figure()
    plt.subplot(211)
    _ = H.plot()

    import h5py
    with h5py.File('h1d.h5', 'w') as f:
        H.toHdf(f, 'h1d')

    with h5py.File('h1d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h1d'])

    plt.subplot(212)
    _ = H1.plot()





.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_1d_006.png
   :alt: plot histogram 1d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_1d_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-125

.. code-block:: default

    mesh = RectilinearMesh1D(edges=StatArray(np.linspace(-3.0, 3.0, 101), 'bins', 'm'))







.. GENERATED FROM PYTHON SOURCE LINES 126-127

Set the histogram using the bins, and update

.. GENERATED FROM PYTHON SOURCE LINES 127-129

.. code-block:: default

    H = Histogram(mesh=mesh)








.. GENERATED FROM PYTHON SOURCE LINES 130-131

We can update the histogram with some new values

.. GENERATED FROM PYTHON SOURCE LINES 131-157

.. code-block:: default

    H.update(np.random.randn(1000), trim=True)

    import h5py
    with h5py.File('h1d.h5', 'w') as f:
        H.createHdf(f, 'h1d', add_axis=StatArray(np.arange(3.0), "Name", "Units"))
        H.writeHdf(f, 'h1d', index=0)
        H.update(np.random.randn(1000), trim=True)
        H.writeHdf(f, 'h1d', index=1)
        H.update(np.random.randn(1000), trim=True)
        H.writeHdf(f, 'h1d', index=2)

    with h5py.File('h1d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h1d'])
        H2 = Histogram.fromHdf(f['h1d'], index=0)
        H3 = Histogram.fromHdf(f['h1d'], index=1)
        H4 = Histogram.fromHdf(f['h1d'], index=2)


    print(H4.summary)

    # plt.figure()
    # plt.subplot(211)
    # _ = H1.plot()
    # plt.subplot(212)
    # _ = H4.plot()

    plt.show()



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Histogram:
    mesh:
    |   RectilinearMesh1D
    |   Number of Cells:
    |   |   100
    |   Cell Centres:
    |   |   Name: bins (m) 0x7ff592df8940
    |   |   Shape: (100,)
    |   |   Values: [-2.97 -2.91 -2.85 ...  2.85  2.91  2.97]
    |   |   min: -2.9699999999999998
    |   |   max: 2.9699999999999998
    |   Cell Edges:
    |   |   Name: bins (m) 0x7ff592df8dc0
    |   |    Shape: (101,)
    |   |    Values: [-3.   -2.94 -2.88 ...  2.88  2.94  3.  ]
    |   |    min: -3.0
    |   |    max: 3.0
    |   log:
    |   |   None
    |   relativeTo:
    |   |   Name:  0x7ff592dad0c0
    |   |    Shape: (1,)
    |   |    Values: [0.]
    |   |    min: 0.0
    |   |    max: 0.0
    |values:
    |   Name: Frequency 0x7ff592df8b40
    |   Shape: (100,)
    |   Values: [1 0 1 ... 1 1 0]
    |   min: 0
    |   max: 82






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.342 seconds)


.. _sphx_glr_download_examples_Statistics_plot_histogram_1d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_histogram_1d.py <plot_histogram_1d.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_histogram_1d.ipynb <plot_histogram_1d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
