
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_histogram_2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Statistics_plot_histogram_2d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_histogram_2d.py:


Histogram 2D
------------

This 2D histogram class allows efficient updating of histograms, plotting and
saving as HDF5.

.. GENERATED FROM PYTHON SOURCE LINES 11-21

.. code-block:: default

    import h5py
    import geobipy
    from geobipy import StatArray
    from geobipy import Histogram
    import matplotlib.pyplot as plt
    import matplotlib.gridspec as gridspec
    from geobipy import RectilinearMesh2D
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 22-23

Create some histogram bins in x and y

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default

    x = StatArray(np.linspace(-4.0, 4.0, 100), 'Variable 1')
    y = StatArray(np.linspace(-4.0, 4.0, 105), 'Variable 2')

    mesh = RectilinearMesh2D(x_edges=x, y_edges=y)







.. GENERATED FROM PYTHON SOURCE LINES 28-29

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    H = Histogram(mesh)








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default

    a = np.random.randn(1000000)
    b = np.random.randn(1000000)








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: default

    H.update(a, b)








.. GENERATED FROM PYTHON SOURCE LINES 41-59

.. code-block:: default

    plt.figure()
    plt.subplot(131)
    plt.title("2D Histogram")
    _ = H.plot(cmap='gray_r')
    plt.subplot(132)
    H.pdf.plot(cmap='gray_r')
    plt.subplot(133)
    H.pmf.plot(cmap='gray_r')


    plt.figure()
    plt.subplot(131)
    H.cdf(axis=0).plot()
    plt.subplot(132)
    H.cdf(axis=1).plot()
    plt.subplot(133)
    H.cdf().plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_001.png
         :alt: 2D Histogram
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_002.png
         :alt: plot histogram 2d
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<AxesSubplot: xlabel='Variable 1', ylabel='Variable 2'>, <matplotlib.collections.QuadMesh object at 0x7ff5b107b370>, <matplotlib.colorbar.Colorbar object at 0x7ff5b107a0e0>)



.. GENERATED FROM PYTHON SOURCE LINES 60-61

We can overlay the histogram with its credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: default

    plt.figure()
    plt.title("90% credible intervals overlain")
    H.pcolor(cmap='gray_r')
    H.plotCredibleIntervals(axis=0, percent=95.0)
    _ = H.plotCredibleIntervals(axis=1, percent=95.0)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_003.png
   :alt: 90% credible intervals overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-69

Generate marginal histograms along an axis

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default

    h1 = H.marginalize(axis=0)
    h2 = H.marginalize(axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 73-74

Note that the names of the variables are automatically displayed

.. GENERATED FROM PYTHON SOURCE LINES 74-81

.. code-block:: default

    plt.figure()
    plt.suptitle("Marginals along each axis")
    plt.subplot(121)
    h1.plot()
    plt.subplot(122)
    _ = h2.plot()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_004.png
   :alt: Marginals along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-84

Create a combination plot with marginal histograms.
sphinx_gallery_thumbnail_number = 3

.. GENERATED FROM PYTHON SOURCE LINES 84-102

.. code-block:: default

    plt.figure()
    gs = gridspec.GridSpec(5, 5)
    gs.update(wspace=0.3, hspace=0.3)
    ax = [plt.subplot(gs[1:, :4])]
    H.pcolor(colorbar = False)

    ax.append(plt.subplot(gs[:1, :4]))
    h = H.marginalize(axis=0).plot()
    plt.xlabel(''); plt.ylabel('')
    plt.xticks([]); plt.yticks([])
    ax[-1].spines["left"].set_visible(False)

    ax.append(plt.subplot(gs[1:, 4:]))
    h = H.marginalize(axis=1).plot(transpose=True)
    plt.ylabel(''); plt.xlabel('')
    plt.yticks([]); plt.xticks([])
    ax[-1].spines["bottom"].set_visible(False)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_005.png
   :alt: plot histogram 2d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 103-104

Take the mean or median estimates from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: default

    mean = H.mean()
    median = H.median()








.. GENERATED FROM PYTHON SOURCE LINES 108-124

.. code-block:: default

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=0)
    H.plotMedian(axis=0, color='g')
    H.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=1)
    H.plotMedian(axis=1, color='g')
    H.plotMean(axis=1, color='y')
    plt.legend()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_006.png
   :alt: Mean, median, and credible interval overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff5a3467fd0>



.. GENERATED FROM PYTHON SOURCE LINES 125-126

Get the range between credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 126-128

.. code-block:: default

    H.credible_range(percent=95.0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    StatArray([3.71717172, 1.85858586, 3.31313131, ..., 3.7979798 ,
               3.31313131, 3.95959596])



.. GENERATED FROM PYTHON SOURCE LINES 129-130

We can map the credible range to an opacity or transparency

.. GENERATED FROM PYTHON SOURCE LINES 130-148

.. code-block:: default

    H.opacity()
    H.transparency()

    # H.animate(0, 'test.mp4')

    import h5py
    with h5py.File('h2d.h5', 'w') as f:
        H.toHdf(f, 'h2d')

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'])

    plt.close('all')

    x = StatArray(5.0 + np.linspace(-4.0, 4.0, 100), 'Variable 1')
    y = StatArray(10.0 + np.linspace(-4.0, 4.0, 105), 'Variable 2')

    mesh = RectilinearMesh2D(x_edges=x, x_relative_to=5.0, y_edges=y, y_relative_to=10.0)







.. GENERATED FROM PYTHON SOURCE LINES 149-150

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 150-152

.. code-block:: default

    H = Histogram(mesh)








.. GENERATED FROM PYTHON SOURCE LINES 153-154

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 154-157

.. code-block:: default

    a = np.random.randn(1000000) + 5.0
    b = np.random.randn(1000000) + 10.0








.. GENERATED FROM PYTHON SOURCE LINES 158-159

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 159-161

.. code-block:: default

    H.update(a, b)








.. GENERATED FROM PYTHON SOURCE LINES 162-179

.. code-block:: default

    plt.figure()
    plt.subplot(131)
    plt.title("2D Histogram")
    _ = H.plot(cmap='gray_r')
    plt.subplot(132)
    H.pdf.plot(cmap='gray_r')
    plt.subplot(133)
    H.pmf.plot(cmap='gray_r')

    plt.figure()
    plt.subplot(131)
    H.cdf(axis=0).plot()
    plt.subplot(132)
    H.cdf(axis=1).plot()
    plt.subplot(133)
    H.cdf().plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_007.png
         :alt: 2D Histogram
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_008.png
         :alt: plot histogram 2d
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<AxesSubplot: xlabel='Variable 1', ylabel='Variable 2'>, <matplotlib.collections.QuadMesh object at 0x7ff593d72c50>, <matplotlib.colorbar.Colorbar object at 0x7ff593d73100>)



.. GENERATED FROM PYTHON SOURCE LINES 180-181

We can overlay the histogram with its credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 181-187

.. code-block:: default

    plt.figure()
    plt.title("90% credible intervals overlain")
    H.pcolor(cmap='gray_r')
    H.plotCredibleIntervals(axis=0, percent=95.0)
    _ = H.plotCredibleIntervals(axis=1, percent=95.0)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_009.png
   :alt: 90% credible intervals overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 188-189

Generate marginal histograms along an axis

.. GENERATED FROM PYTHON SOURCE LINES 189-192

.. code-block:: default

    h1 = H.marginalize(axis=0)
    h2 = H.marginalize(axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

Note that the names of the variables are automatically displayed

.. GENERATED FROM PYTHON SOURCE LINES 194-201

.. code-block:: default

    plt.figure()
    plt.suptitle("Marginals along each axis")
    plt.subplot(121)
    h1.plot()
    plt.subplot(122)
    _ = h2.plot()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_010.png
   :alt: Marginals along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 202-204

Create a combination plot with marginal histograms.
sphinx_gallery_thumbnail_number = 3

.. GENERATED FROM PYTHON SOURCE LINES 204-222

.. code-block:: default

    plt.figure()
    gs = gridspec.GridSpec(5, 5)
    gs.update(wspace=0.3, hspace=0.3)
    ax = [plt.subplot(gs[1:, :4])]
    H.pcolor(colorbar = False)

    ax.append(plt.subplot(gs[:1, :4]))
    h = H.marginalize(axis=0).plot()
    plt.xlabel(''); plt.ylabel('')
    plt.xticks([]); plt.yticks([])
    ax[-1].spines["left"].set_visible(False)

    ax.append(plt.subplot(gs[1:, 4:]))
    h = H.marginalize(axis=1).plot(transpose=True)
    plt.ylabel(''); plt.xlabel('')
    plt.yticks([]); plt.xticks([])
    ax[-1].spines["bottom"].set_visible(False)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_011.png
   :alt: plot histogram 2d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 223-224

Take the mean or median estimates from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 224-227

.. code-block:: default

    mean = H.mean()
    median = H.median()








.. GENERATED FROM PYTHON SOURCE LINES 228-244

.. code-block:: default

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=0)
    H.plotMedian(axis=0, color='g')
    H.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=1)
    H.plotMedian(axis=1, color='g')
    H.plotMean(axis=1, color='y')
    plt.legend()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_012.png
   :alt: Mean, median, and credible interval overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_012.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7ff5a32622c0>



.. GENERATED FROM PYTHON SOURCE LINES 245-246

Get the range between credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 246-248

.. code-block:: default

    H.credible_range(percent=95.0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    StatArray([4.28282828, 2.82828283, 3.71717172, ..., 4.2020202 ,
               3.55555556, 3.55555556])



.. GENERATED FROM PYTHON SOURCE LINES 249-250

We can map the credible range to an opacity or transparency

.. GENERATED FROM PYTHON SOURCE LINES 250-307

.. code-block:: default

    H.opacity()
    H.transparency()

    # # H.animate(0, 'test.mp4')

    with h5py.File('h2d.h5', 'w') as f:
        H.toHdf(f, 'h2d')

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'])

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=0)
    H1.plotMedian(axis=0, color='g')
    H1.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=1)
    H1.plotMedian(axis=1, color='g')
    H1.plotMean(axis=1, color='y')
    plt.legend()

    with h5py.File('h2d.h5', 'w') as f:
        H.createHdf(f, 'h2d', add_axis=StatArray(np.arange(3.0), name='Easting', units="m"))
        for i in range(3):
            H.writeHdf(f, 'h2d', index=i)

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'], index=0)

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=0)
    H1.plotMedian(axis=0, color='g')
    H1.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=1)
    H1.plotMedian(axis=1, color='g')
    H1.plotMean(axis=1, color='y')
    plt.legend()

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'])

    H1.pyvista_mesh().save('h3d_read.vtk')

    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_013.png
         :alt: Mean, median, and credible interval overlain
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_014.png
         :alt: Mean, median, and credible interval overlain
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_014.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.988 seconds)


.. _sphx_glr_download_examples_Statistics_plot_histogram_2d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_histogram_2d.py <plot_histogram_2d.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_histogram_2d.ipynb <plot_histogram_2d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
