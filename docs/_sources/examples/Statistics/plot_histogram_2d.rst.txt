
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_histogram_2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Statistics_plot_histogram_2d.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_histogram_2d.py:


Histogram 2D
------------

This 2D histogram class allows efficient updating of histograms, plotting and
saving as HDF5.

.. GENERATED FROM PYTHON SOURCE LINES 11-21

.. code-block:: Python

    import h5py
    import geobipy
    from geobipy import StatArray
    from geobipy import Histogram
    import matplotlib.pyplot as plt
    import matplotlib.gridspec as gridspec
    from geobipy import RectilinearMesh2D
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 22-23

Create some histogram bins in x and y

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: Python

    x = StatArray(np.linspace(-4.0, 4.0, 100), 'Variable 1')
    y = StatArray(np.linspace(-4.0, 4.0, 105), 'Variable 2')

    mesh = RectilinearMesh2D(x_edges=x, y_edges=y)







.. GENERATED FROM PYTHON SOURCE LINES 28-29

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: Python

    H = Histogram(mesh)








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: Python

    a = np.random.randn(1000000)
    b = np.random.randn(1000000)








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: Python

    H.update(a, b)








.. GENERATED FROM PYTHON SOURCE LINES 41-59

.. code-block:: Python

    plt.figure()
    plt.subplot(131)
    plt.title("2D Histogram")
    _ = H.plot(cmap='gray_r')
    plt.subplot(132)
    H.pdf.plot(cmap='gray_r')
    plt.subplot(133)
    H.pmf.plot(cmap='gray_r')


    plt.figure()
    plt.subplot(131)
    H.cdf(axis=0).plot()
    plt.subplot(132)
    H.cdf(axis=1).plot()
    plt.subplot(133)
    H.cdf().plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_001.png
         :alt: 2D Histogram
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_002.png
         :alt: plot histogram 2d
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: xlabel='Variable 1', ylabel='Variable 2'>, <matplotlib.collections.QuadMesh object at 0x16438c8c0>, <matplotlib.colorbar.Colorbar object at 0x16438dd30>)



.. GENERATED FROM PYTHON SOURCE LINES 60-61

We can overlay the histogram with its credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: Python

    plt.figure()
    plt.title("90% credible intervals overlain")
    H.pcolor(cmap='gray_r')
    H.plotCredibleIntervals(axis=0, percent=95.0)
    _ = H.plotCredibleIntervals(axis=1, percent=95.0)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_003.png
   :alt: 90% credible intervals overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-69

Generate marginal histograms along an axis

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: Python

    h1 = H.marginalize(axis=0)
    h2 = H.marginalize(axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 73-74

Note that the names of the variables are automatically displayed

.. GENERATED FROM PYTHON SOURCE LINES 74-81

.. code-block:: Python

    plt.figure()
    plt.suptitle("Marginals along each axis")
    plt.subplot(121)
    h1.plot()
    plt.subplot(122)
    _ = h2.plot()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_004.png
   :alt: Marginals along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-84

Create a combination plot with marginal histograms.
sphinx_gallery_thumbnail_number = 3

.. GENERATED FROM PYTHON SOURCE LINES 84-102

.. code-block:: Python

    plt.figure()
    gs = gridspec.GridSpec(5, 5)
    gs.update(wspace=0.3, hspace=0.3)
    ax = [plt.subplot(gs[1:, :4])]
    H.pcolor(colorbar = False)

    ax.append(plt.subplot(gs[:1, :4]))
    h = H.marginalize(axis=0).plot()
    plt.xlabel(''); plt.ylabel('')
    plt.xticks([]); plt.yticks([])
    ax[-1].spines["left"].set_visible(False)

    ax.append(plt.subplot(gs[1:, 4:]))
    h = H.marginalize(axis=1).plot(transpose=True)
    plt.ylabel(''); plt.xlabel('')
    plt.yticks([]); plt.xticks([])
    ax[-1].spines["bottom"].set_visible(False)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_005.png
   :alt: plot histogram 2d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 103-104

Take the mean or median estimates from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: Python

    mean = H.mean()
    median = H.median()








.. GENERATED FROM PYTHON SOURCE LINES 108-124

.. code-block:: Python

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=0)
    H.plotMedian(axis=0, color='g')
    H.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=1)
    H.plotMedian(axis=1, color='g')
    H.plotMean(axis=1, color='y')
    plt.legend()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_006.png
   :alt: Mean, median, and credible interval overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x164a133b0>



.. GENERATED FROM PYTHON SOURCE LINES 125-126

Get the range between credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 126-128

.. code-block:: Python

    H.credible_range(percent=95.0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    StatArray([4.92929293, 3.55555556, 2.50505051, 4.44444444, 4.92929293,
               3.15151515, 3.7979798 , 4.12121212, 4.36363636, 3.31313131,
               4.36363636, 3.95959596, 3.7979798 , 3.63636364, 4.12121212,
               4.04040404, 3.87878788, 4.12121212, 3.95959596, 3.7979798 ,
               3.95959596, 4.28282828, 3.87878788, 3.95959596, 3.7979798 ,
               3.95959596, 3.95959596, 3.95959596, 3.95959596, 3.95959596,
               3.95959596, 4.04040404, 3.95959596, 3.95959596, 3.87878788,
               3.87878788, 4.04040404, 3.95959596, 3.87878788, 3.87878788,
               3.87878788, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.87878788, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.95959596, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.87878788, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.95959596, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.95959596, 3.87878788, 3.95959596, 3.87878788, 3.95959596,
               3.95959596, 3.95959596, 3.87878788, 3.87878788, 3.87878788,
               3.95959596, 3.95959596, 3.87878788, 3.95959596, 3.87878788,
               3.95959596, 3.7979798 , 3.95959596, 3.95959596, 3.87878788,
               3.95959596, 3.87878788, 3.7979798 , 3.87878788, 3.87878788,
               3.87878788, 4.36363636, 4.28282828, 4.2020202 , 4.28282828,
               4.52525253, 4.44444444, 4.12121212, 3.63636364, 4.04040404,
               2.98989899, 3.7979798 , 2.90909091, 3.63636364])



.. GENERATED FROM PYTHON SOURCE LINES 129-130

We can map the credible range to an opacity or transparency

.. GENERATED FROM PYTHON SOURCE LINES 130-148

.. code-block:: Python

    H.opacity()
    H.transparency()

    # H.animate(0, 'test.mp4')

    import h5py
    with h5py.File('h2d.h5', 'w') as f:
        H.toHdf(f, 'h2d')

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'])

    plt.close('all')

    x = StatArray(5.0 + np.linspace(-4.0, 4.0, 100), 'Variable 1')
    y = StatArray(10.0 + np.linspace(-4.0, 4.0, 105), 'Variable 2')

    mesh = RectilinearMesh2D(x_edges=x, x_relative_to=5.0, y_edges=y, y_relative_to=10.0)







.. GENERATED FROM PYTHON SOURCE LINES 149-150

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 150-152

.. code-block:: Python

    H = Histogram(mesh)








.. GENERATED FROM PYTHON SOURCE LINES 153-154

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 154-157

.. code-block:: Python

    a = np.random.randn(1000000) + 5.0
    b = np.random.randn(1000000) + 10.0








.. GENERATED FROM PYTHON SOURCE LINES 158-159

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 159-161

.. code-block:: Python

    H.update(a, b)








.. GENERATED FROM PYTHON SOURCE LINES 162-179

.. code-block:: Python

    plt.figure()
    plt.subplot(131)
    plt.title("2D Histogram")
    _ = H.plot(cmap='gray_r')
    plt.subplot(132)
    H.pdf.plot(cmap='gray_r')
    plt.subplot(133)
    H.pmf.plot(cmap='gray_r')

    plt.figure()
    plt.subplot(131)
    H.cdf(axis=0).plot()
    plt.subplot(132)
    H.cdf(axis=1).plot()
    plt.subplot(133)
    H.cdf().plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_007.png
         :alt: 2D Histogram
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_008.png
         :alt: plot histogram 2d
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: xlabel='Variable 1', ylabel='Variable 2'>, <matplotlib.collections.QuadMesh object at 0x165602120>, <matplotlib.colorbar.Colorbar object at 0x164cf4a10>)



.. GENERATED FROM PYTHON SOURCE LINES 180-181

We can overlay the histogram with its credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 181-191

.. code-block:: Python

    plt.figure()
    plt.title("90% credible intervals overlain")
    H.pcolor(cmap='gray_r')
    H.plotCredibleIntervals(axis=0, percent=95.0)
    _ = H.plotCredibleIntervals(axis=1, percent=95.0)

    # Generate marginal histograms along an axis
    h1 = H.marginalize(axis=0)
    h2 = H.marginalize(axis=1)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_009.png
   :alt: 90% credible intervals overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 192-193

Note that the names of the variables are automatically displayed

.. GENERATED FROM PYTHON SOURCE LINES 193-200

.. code-block:: Python

    plt.figure()
    plt.suptitle("Marginals along each axis")
    plt.subplot(121)
    h1.plot()
    plt.subplot(122)
    _ = h2.plot()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_010.png
   :alt: Marginals along each axis
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 201-203

Create a combination plot with marginal histograms.
sphinx_gallery_thumbnail_number = 3

.. GENERATED FROM PYTHON SOURCE LINES 203-221

.. code-block:: Python

    plt.figure()
    gs = gridspec.GridSpec(5, 5)
    gs.update(wspace=0.3, hspace=0.3)
    ax = [plt.subplot(gs[1:, :4])]
    H.pcolor(colorbar = False)

    ax.append(plt.subplot(gs[:1, :4]))
    h = H.marginalize(axis=0).plot()
    plt.xlabel(''); plt.ylabel('')
    plt.xticks([]); plt.yticks([])
    ax[-1].spines["left"].set_visible(False)

    ax.append(plt.subplot(gs[1:, 4:]))
    h = H.marginalize(axis=1).plot(transpose=True)
    plt.ylabel(''); plt.xlabel('')
    plt.yticks([]); plt.xticks([])
    ax[-1].spines["bottom"].set_visible(False)




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_011.png
   :alt: plot histogram 2d
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 222-223

Take the mean or median estimates from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 223-226

.. code-block:: Python

    mean = H.mean()
    median = H.median()








.. GENERATED FROM PYTHON SOURCE LINES 227-243

.. code-block:: Python

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=0)
    H.plotMedian(axis=0, color='g')
    H.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H.pcolor(cmap='gray_r', colorbar=False)
    H.plotCredibleIntervals(axis=1)
    H.plotMedian(axis=1, color='g')
    H.plotMean(axis=1, color='y')
    plt.legend()




.. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_012.png
   :alt: Mean, median, and credible interval overlain
   :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_012.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x16447adb0>



.. GENERATED FROM PYTHON SOURCE LINES 244-245

Get the range between credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 245-247

.. code-block:: Python

    H.credible_range(percent=95.0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    StatArray([4.12121212, 3.47474747, 3.15151515, 4.12121212, 4.36363636,
               3.63636364, 3.87878788, 4.84848485, 3.63636364, 3.71717172,
               4.2020202 , 4.04040404, 3.7979798 , 3.39393939, 4.12121212,
               3.7979798 , 4.28282828, 3.7979798 , 3.95959596, 3.87878788,
               4.04040404, 3.95959596, 3.87878788, 3.95959596, 3.87878788,
               4.04040404, 3.95959596, 3.95959596, 3.95959596, 3.87878788,
               3.95959596, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.95959596, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.87878788, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.87878788, 3.87878788, 3.87878788, 3.95959596, 3.87878788,
               3.87878788, 3.87878788, 3.87878788, 3.95959596, 3.87878788,
               3.87878788, 4.04040404, 3.87878788, 3.95959596, 3.95959596,
               3.87878788, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.87878788, 3.87878788, 3.87878788, 3.87878788, 3.87878788,
               3.95959596, 3.87878788, 3.87878788, 3.95959596, 3.87878788,
               3.95959596, 3.87878788, 3.87878788, 3.87878788, 3.95959596,
               3.95959596, 3.95959596, 3.87878788, 3.7979798 , 3.87878788,
               3.71717172, 3.87878788, 4.04040404, 4.2020202 , 3.7979798 ,
               3.95959596, 4.12121212, 3.7979798 , 3.71717172, 4.2020202 ,
               3.55555556, 3.95959596, 3.71717172, 3.87878788, 4.76767677,
               3.95959596, 4.52525253, 4.36363636, 3.31313131])



.. GENERATED FROM PYTHON SOURCE LINES 248-249

We can map the credible range to an opacity or transparency

.. GENERATED FROM PYTHON SOURCE LINES 249-306

.. code-block:: Python

    H.opacity()
    H.transparency()

    # # H.animate(0, 'test.mp4')

    with h5py.File('h2d.h5', 'w') as f:
        H.toHdf(f, 'h2d')

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'])

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=0)
    H1.plotMedian(axis=0, color='g')
    H1.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=1)
    H1.plotMedian(axis=1, color='g')
    H1.plotMean(axis=1, color='y')
    plt.legend()

    with h5py.File('h2d.h5', 'w') as f:
        H.createHdf(f, 'h2d', add_axis=StatArray(np.arange(3.0), name='Easting', units="m"))
        for i in range(3):
            H.writeHdf(f, 'h2d', index=i)

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'], index=0)

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=0)
    H1.plotMedian(axis=0, color='g')
    H1.plotMean(axis=0, color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H1.pcolor(cmap='gray_r', colorbar=False)
    H1.plotCredibleIntervals(axis=1)
    H1.plotMedian(axis=1, color='g')
    H1.plotMean(axis=1, color='y')
    plt.legend()

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram.fromHdf(f['h2d'])

    H1.pyvista_mesh().save('h3d_read.vtk')

    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_013.png
         :alt: Mean, median, and credible interval overlain
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_014.png
         :alt: Mean, median, and credible interval overlain
         :srcset: /examples/Statistics/images/sphx_glr_plot_histogram_2d_014.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 32.906 seconds)


.. _sphx_glr_download_examples_Statistics_plot_histogram_2d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_histogram_2d.ipynb <plot_histogram_2d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_histogram_2d.py <plot_histogram_2d.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
