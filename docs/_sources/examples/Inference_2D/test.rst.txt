
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Inference_2D/test.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Inference_2D_test.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Inference_2D_test.py:


2D Posterior analysis of Resolve inference
------------------------------------------

All plotting in GeoBIPy can be carried out using the 3D inference class

.. GENERATED FROM PYTHON SOURCE LINES 8-76

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    from geobipy import Model
    from geobipy import Inference2D

    def plot_2d_summary(folder, data_type, model_type):
       #%%
       # Inference for a line of inferences
       # ++++++++++++++++++++++++++++++++++
       #
       # We can instantiate the inference handler by providing a path to the directory containing
       # HDF5 files generated by GeoBIPy.
       #
       # The InfereceXD classes are low memory.  They only read information from the HDF5 files
       # as and when it is needed.
       #
       # The first time you use these classes to create plots, expect longer initial processing times.
       # I precompute expensive properties and store them in the HDF5 files for later use.

       from numpy.random import Generator
       from numpy.random import PCG64DXSM
       generator = PCG64DXSM(seed=0)
       prng = Generator(generator)

       #%%
       results_2d = Inference2D.fromHdf('{}/{}/{}/0.0.h5'.format(folder, data_type, model_type), prng=prng)

       kwargs = {
             "log" : 10,
             "cmap" : 'jet'
             }

       true_model = Model.create_synthetic_model(model_type)
       true_model.mesh.y_edges = true_model.mesh.y_edges / 10.0

       kwargs['vmin'] = np.log10(np.min(true_model.values))
       kwargs['vmax'] = np.log10(np.max(true_model.values))

       t = results_2d.inference_1d(index=7)

       plt.figure()
       t.model.plot_posteriors(edges_kwargs={
                               'transpose': True,
                               'trim': False},
                               values_kwargs={
                               'colorbar': False,
                               'flipY': True,
                               'xscale': 'log',
                               'credible_interval_kwargs': {
                               }})

       tmp = t.model.values.posterior


       plt.show(block=True)
       # plt.savefig('{}_{}.png'.format(data_type, model_type), dpi=300)

    if __name__ == '__main__':
       models = ['glacial']#, 'saline_clay', 'resistive_dolomites', 'resistive_basement', 'coastal_salt_water', 'ice_over_salt_water']

       for model in models:
          # try:
             plot_2d_summary("../../../Parallel_Inference/", "resolve", model)
          # except Exception as e:
          #    print(model)
          #    print(e)
          #    pass


.. _sphx_glr_download_examples_Inference_2D_test.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: test.ipynb <test.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: test.py <test.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
