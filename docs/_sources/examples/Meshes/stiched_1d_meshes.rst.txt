
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Meshes/stiched_1d_meshes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Meshes_stiched_1d_meshes.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Meshes_stiched_1d_meshes.py:


Stitched 1D meshes
------------------
Stitched 1D meshes that can have different numbers of cells

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default

    from geobipy import StatArray
    from geobipy import RectilinearMesh2D_stitched
    import matplotlib.pyplot as plt
    import numpy as np



.. GENERATED FROM PYTHON SOURCE LINES 16-17

Specify some cell centres in x and y

.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. code-block:: default

    x = StatArray(np.arange(10.0), 'Easting', 'm')
    y = StatArray(np.arange(10.0), 'Northing', 'm')
    rm = RectilinearMesh2D(xCentres=x, yCentres=y)


.. GENERATED FROM PYTHON SOURCE LINES 22-23

We can plot the grid lines of the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 23-26

.. code-block:: default

    plt.figure()
    _  = rm.plotGrid(linewidth=0.5)


.. GENERATED FROM PYTHON SOURCE LINES 27-28

Intersecting lines with a mesh

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: default

    arr = np.zeros(rm.shape)


.. GENERATED FROM PYTHON SOURCE LINES 31-37

Intersecting multisegment lines with a mesh
arr = np.zeros(rm.shape)
ix, iy = rm.line_indices([0.0, 3.0, 6.0, 9], [2.0, 6.0, -10.0, 10])
arr[iy, ix] = 1
plt.figure()
rm.pcolor(values = arr)

.. GENERATED FROM PYTHON SOURCE LINES 39-41

2D Mesh embedded in 3D
++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: default

    z = StatArray(np.cumsum(np.arange(15.0)), 'Depth', 'm')
    rm = RectilinearMesh2D(xCentres=x, yCentres=y, zCentres=z)


.. GENERATED FROM PYTHON SOURCE LINES 45-46

Plot the x-y coordinates of the mesh

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    plt.figure()
    _ = rm.plotXY()


.. GENERATED FROM PYTHON SOURCE LINES 50-51

Again, plot the grid. This time the z-coordinate dominates the plot.

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    plt.figure()
    _ = rm.plotGrid(xAxis='r', flipY=True, linewidth=0.5)


.. GENERATED FROM PYTHON SOURCE LINES 55-56

We can pcolor the mesh by providing cell values.

.. GENERATED FROM PYTHON SOURCE LINES 56-76

.. code-block:: default

    xx, yy = np.meshgrid(rm.x.centres, rm.z.centres)
    arr = StatArray(np.sin(np.sqrt(xx ** 2.0 + yy ** 2.0)), "Values")

    plt.figure()
    _ = rm.pcolor(arr, xAxis='r', grid=True, flipY=True, linewidth=0.5)

    xG = rm.xGradientMatrix()
    zG = rm.zGradientMatrix()

    # dax = StatArray((xG * arr.flatten()).reshape((arr.shape[0], arr.shape[1]-1)))
    # rm2 = rm[:, :9]

    # plt.figure()
    # rm2.pcolor(dax, xAxis='r', grid=True, flipY=True, linewidth=0.5)

    # dax = StatArray((zG * arr.flatten()).reshape((arr.shape[0]-1, arr.shape[1])))

    # plt.figure()
    # dax.pcolor(grid=True, flipY=True, linewidth=0.5)


.. GENERATED FROM PYTHON SOURCE LINES 77-78

Mask the x axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 78-82

.. code-block:: default

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(xAxis='x', x_distance=0.4, values=arr)
    plt.figure()
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)


.. GENERATED FROM PYTHON SOURCE LINES 83-84

Mask the z axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 84-88

.. code-block:: default

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(xAxis='x', z_distance=4.9, values=arr)
    plt.figure()
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)


.. GENERATED FROM PYTHON SOURCE LINES 89-90

Mask axes by a distance

.. GENERATED FROM PYTHON SOURCE LINES 90-94

.. code-block:: default

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(xAxis='x', x_distance=0.4, z_distance=4.9, values=arr)
    plt.figure()
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)


.. GENERATED FROM PYTHON SOURCE LINES 95-97

We can perform some interval statistics on the cell values of the mesh
Generate some values

.. GENERATED FROM PYTHON SOURCE LINES 97-99

.. code-block:: default

    a = np.repeat(np.arange(1.0, np.float64(rm.x.nCells+1))[:, np.newaxis], rm.z.nCells, 1).T


.. GENERATED FROM PYTHON SOURCE LINES 100-101

Compute the mean over an interval for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    rm.intervalStatistic(a, intervals=[6.8, 12.4], axis=0, statistic='mean')


.. GENERATED FROM PYTHON SOURCE LINES 104-105

Compute the mean over multiple intervals for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    rm.intervalStatistic(a, intervals=[6.8, 12.4, 20.0, 40.0], axis=0, statistic='mean')


.. GENERATED FROM PYTHON SOURCE LINES 108-109

We can specify either axis

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: default

    rm.intervalStatistic(a, intervals=[2.8, 4.2], axis=1, statistic='mean')


.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: default

    rm.intervalStatistic(a, intervals=[2.8, 4.2, 5.1, 8.4], axis=1, statistic='mean')


.. GENERATED FROM PYTHON SOURCE LINES 115-116

Slice the 2D mesh to retrieve either a 2D mesh or 1D mesh

.. GENERATED FROM PYTHON SOURCE LINES 116-128

.. code-block:: default

    rm2 = rm[:5, :5]
    rm3 = rm[:, 5]
    rm4 = rm[5, :]

    plt.figure()
    plt.subplot(131)
    rm2.plotGrid()
    plt.subplot(132)
    rm3.plotGrid()
    plt.subplot(133)
    rm4.plotGrid()


.. GENERATED FROM PYTHON SOURCE LINES 129-130

Resample a grid

.. GENERATED FROM PYTHON SOURCE LINES 130-141

.. code-block:: default

    values = StatArray(np.random.randn(*rm.shape))
    rm2, values2 = rm.resample(0.5, 0.5, values)



    plt.figure()
    plt.subplot(121)
    rm.pcolor(values)
    plt.subplot(122)
    rm2.pcolor(values2)


.. GENERATED FROM PYTHON SOURCE LINES 142-144

Axes in log space
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 144-148

.. code-block:: default

    x = StatArray(np.logspace(-1, 4, 10), 'x')
    y = StatArray(np.logspace(0, 3, 10), 'y')
    rm = RectilinearMesh2D(xEdges=x, xlog=10, yEdges=y, ylog=10)


.. GENERATED FROM PYTHON SOURCE LINES 149-150

We can plot the grid lines of the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 150-153

.. code-block:: default

    plt.figure()
    _  = rm.plotGrid(linewidth=0.5)


.. GENERATED FROM PYTHON SOURCE LINES 154-155

Intersecting lines with a mesh

.. GENERATED FROM PYTHON SOURCE LINES 155-158

.. code-block:: default

    x = np.r_[0.1, 1000.0]
    y = np.r_[1.0, 1000.0]


.. GENERATED FROM PYTHON SOURCE LINES 159-165

Intersecting multisegment lines with a mesh
arr = np.zeros(rm.shape)
ix, iy = rm.line_indices([0.0, 3.0, 6.0, 9], [2.0, 6.0, -10.0, 10])
arr[iy, ix] = 1
plt.figure()
rm.pcolor(values = arr)

.. GENERATED FROM PYTHON SOURCE LINES 168-181

.. code-block:: default

    import h5py
    with h5py.File('rm2d.h5', 'w') as f:
        rm.toHdf(f, 'test')

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'])

    values = StatArray(np.random.randn(*rm2.shape))

    plt.figure()
    rm2.pcolor(values)

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_Meshes_stiched_1d_meshes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: stiched_1d_meshes.py <stiched_1d_meshes.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: stiched_1d_meshes.ipynb <stiched_1d_meshes.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
