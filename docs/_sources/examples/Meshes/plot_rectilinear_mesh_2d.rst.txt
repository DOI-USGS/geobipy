
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Meshes/plot_rectilinear_mesh_2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_2d.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Meshes_plot_rectilinear_mesh_2d.py:


2D Rectilinear Mesh
-------------------
This 2D rectilinear mesh defines a grid with straight cell boundaries.

It can be instantiated in two ways.

The first is by providing the cell centres or
cell edges in two dimensions.

The second embeds the 2D mesh in 3D by providing the cell centres or edges in three dimensions.
The first two dimensions specify the mesh coordinates in the horiztontal cartesian plane
while the third discretizes in depth. This allows us to characterize a mesh whose horizontal coordinates
do not follow a line that is parallel to either the "x" or "y" axis.

.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: Python

    import h5py
    from geobipy import StatArray
    from geobipy import RectilinearMesh1D, RectilinearMesh2D, RectilinearMesh3D
    import matplotlib.pyplot as plt
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 27-28

Specify some cell centres in x and y

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: Python

    x = StatArray(np.arange(10.0), 'Easting', 'm')
    y = StatArray(np.arange(20.0), 'Depth', 'm')
    rm = RectilinearMesh2D(x_centres=x, y_centres=y)








.. GENERATED FROM PYTHON SOURCE LINES 33-34

We can plot the grid lines of the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 34-45

.. code-block:: Python

    p=0;
    plt.figure(p)
    _  = rm.plotGrid(flipY=True, linewidth=0.5)

    # Intersecting multisegment lines with a mesh
    arr = np.zeros(rm.shape)
    i = rm.line_indices([0.0, 3.0, 6.0, 9], [2.0, 6.0, 0.0, 10])
    arr[i[:, 0], i[:, 1]] = 1
    p += 1; plt.figure(p)
    rm.pcolor(values = arr)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_001.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_002.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: xlabel='Easting (m)', ylabel='Depth (m)'>, <matplotlib.collections.QuadMesh object at 0x164aa2b10>, <matplotlib.colorbar.Colorbar object at 0x164cef3b0>)



.. GENERATED FROM PYTHON SOURCE LINES 46-47

We can pcolor the mesh by providing cell values.

.. GENERATED FROM PYTHON SOURCE LINES 47-67

.. code-block:: Python

    xx, yy = np.meshgrid(rm.y.centres, rm.x.centres)
    arr = StatArray(np.sin(np.sqrt(xx ** 2.0 + yy ** 2.0)), "Values")

    p += 1; plt.figure(p)
    _ = rm.pcolor(arr, grid=True, flipY=True, linewidth=0.5)

    # xG = rm.xGradientMatrix()
    # zG = rm.yGradientMatrix()

    # dax = StatArray((xG * arr.flatten()).reshape((arr.shape[0], arr.shape[1]-1)))
    # rm2 = rm[:, :9]

    # plt.figure()
    # rm2.pcolor(dax, xAxis='r', grid=True, flipY=True, linewidth=0.5)

    # dax = StatArray((zG * arr.flatten()).reshape((arr.shape[0]-1, arr.shape[1])))

    # plt.figure()
    # dax.pcolor(grid=True, flipY=True, linewidth=0.5)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_003.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-69

Mask the x axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: Python

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(x_distance=0.4, values=arr)
    p += 1; plt.figure(p)
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_004.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-75

Mask the z axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: Python

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(y_distance=0.2, values=arr)
    p += 1; plt.figure(p)
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_005.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-81

Mask axes by a distance

.. GENERATED FROM PYTHON SOURCE LINES 81-89

.. code-block:: Python

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(x_distance=0.4, y_distance=0.2, values=arr)
    p += 1; plt.figure(p)
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)

    x = StatArray(np.arange(10.0), 'Easting', 'm')
    y = StatArray(np.cumsum(np.arange(15.0)), 'Depth', 'm')
    rm = RectilinearMesh2D(x_centres=x, y_centres=y)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_006.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-92

We can perform some interval statistics on the cell values of the mesh
Generate some values

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    a = np.repeat(np.arange(1.0, np.float64(rm.x.nCells+1))[:, np.newaxis], rm.y.nCells, 1)








.. GENERATED FROM PYTHON SOURCE LINES 95-96

Compute the mean over an interval for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[6.8, 12.4], axis=0, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9.]]), [6.8, 12.4])



.. GENERATED FROM PYTHON SOURCE LINES 99-100

Compute the mean over multiple intervals for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[6.8, 12.4, 20.0, 40.0], axis=0, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[ 9.,  9.,  9.,  9.,  9.,  9.,  9.,  9.,  9.,  9.,  9.,  9.,  9.,
             9.,  9.],
           [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
            nan, nan],
           [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
            nan, nan]]), [6.8, 12.4, 20.0, 40.0])



.. GENERATED FROM PYTHON SOURCE LINES 103-104

We can specify either axis

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[2.8, 4.2], axis=1, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[ 1.],
           [ 2.],
           [ 3.],
           [ 4.],
           [ 5.],
           [ 6.],
           [ 7.],
           [ 8.],
           [ 9.],
           [10.]]), [2.8, 4.2])



.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[2.8, 4.2, 5.1, 8.4], axis=1, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[ 1., nan,  1.],
           [ 2., nan,  2.],
           [ 3., nan,  3.],
           [ 4., nan,  4.],
           [ 5., nan,  5.],
           [ 6., nan,  6.],
           [ 7., nan,  7.],
           [ 8., nan,  8.],
           [ 9., nan,  9.],
           [10., nan, 10.]]), [2.8, 4.2, 5.1, 8.4])



.. GENERATED FROM PYTHON SOURCE LINES 110-111

Slice the 2D mesh to retrieve either a 2D mesh or 1D mesh

.. GENERATED FROM PYTHON SOURCE LINES 111-123

.. code-block:: Python

    rm2 = rm[:5, :5]
    rm3 = rm[:5, 5]
    rm4 = rm[5, :5]

    p += 1; plt.figure(p)
    plt.subplot(131)
    rm2.plotGrid()
    plt.subplot(132)
    rm3.plotGrid()
    plt.subplot(133)
    rm4.plotGrid(transpose=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_007.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-125

Resample a grid

.. GENERATED FROM PYTHON SOURCE LINES 125-134

.. code-block:: Python

    values = StatArray(np.random.randn(*rm.shape))
    rm2, values2 = rm.resample(0.5, 0.5, values)

    p += 1; plt.figure(p)
    plt.subplot(121)
    rm.pcolor(values)
    plt.subplot(122)
    rm2.pcolor(values2)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_008.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: >, <matplotlib.collections.QuadMesh object at 0x165dc6f60>, <matplotlib.colorbar.Colorbar object at 0x164e378f0>)



.. GENERATED FROM PYTHON SOURCE LINES 135-137

Axes in log space
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 137-145

.. code-block:: Python

    x = StatArray(np.logspace(-1, 4, 10), 'x')
    y = StatArray(np.logspace(0, 3, 10), 'y')
    rm = RectilinearMesh2D(x_edges=x, x_log=10, y_edges=y, y_log=10)

    # We can plot the grid lines of the mesh.
    p += 1; plt.figure(p)
    _  = rm.plotGrid(linewidth=0.5)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_009.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-159

.. code-block:: Python

    with h5py.File('rm2d.h5', 'w') as f:
        rm.toHdf(f, 'test')

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'])

    arr = np.random.randn(*rm.shape)
    p += 1; plt.figure(p)
    plt.subplot(211)
    rm.pcolor(arr)
    plt.subplot(212)
    rm2.pcolor(arr)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_010.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: xlabel='x', ylabel='y'>, <matplotlib.collections.QuadMesh object at 0x16613fd40>, <matplotlib.colorbar.Colorbar object at 0x165ff43e0>)



.. GENERATED FROM PYTHON SOURCE LINES 160-162

RelativeTo
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 162-220

.. code-block:: Python

    x = StatArray(np.arange(10.0), 'Northing', 'm')
    y = StatArray(np.arange(20.0), 'Depth', 'm')

    rm = RectilinearMesh2D(x_centres=x, y_centres=y)

    p += 1; plt.figure(p)
    plt.subplot(121)
    _  = rm.plotGrid(linewidth=0.5, flipY=True)
    rm = RectilinearMesh2D(x_centres=x, x_relative_to=0.2*np.random.randn(y.size), y_centres=y, y_relative_to=0.2*np.random.randn(x.size))
    plt.subplot(122)
    _  = rm.plotGrid(linewidth=0.5, flipY=True)

    # RelativeTo single
    with h5py.File('rm2d.h5', 'w') as f:
        rm.toHdf(f, 'test')

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'])

    arr = np.random.randn(*rm.shape)
    p += 1; plt.figure(p)
    plt.subplot(211)
    rm.pcolor(arr, flipY=True)
    plt.subplot(212)
    rm2.pcolor(arr, flipY=True)

    # RelativeTo expanded
    with h5py.File('rm2d.h5', 'w') as f:
        rm.createHdf(f, 'test', add_axis=RectilinearMesh1D(centres=StatArray(np.arange(3.0), name='Easting', units="m"), relativeTo = 0.2*np.random.randn(x.size, y.size)))
        for i in range(3):
            rm.x.relativeTo += 0.5
            rm.y.relativeTo += 0.5
            rm.writeHdf(f, 'test', index=i)

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'], index=0)

    with h5py.File('rm2d.h5', 'r') as f:
        rm3 = RectilinearMesh3D.fromHdf(f['test'])

    p += 1; plt.figure(p)
    plt.subplot(311)
    rm.pcolor(arr, flipY=True)
    plt.subplot(312)
    rm2.pcolor(arr, flipY=True)

    p += 1; plt.figure(p)
    arr = np.random.randn(*rm3.shape)
    plt.subplot(311)
    mesh = rm3[0, :, :]
    mesh.pcolor(arr[0, :, :], flipY=True)
    plt.subplot(312)
    mesh = rm3[:, 0, :]
    mesh.pcolor(arr[:, 0, :], flipY=True)
    plt.subplot(313)
    rm3[:, :, 0].pcolor(arr[:, :, 0])

    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_011.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_012.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_013.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_014.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_014.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.314 seconds)


.. _sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_2d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rectilinear_mesh_2d.ipynb <plot_rectilinear_mesh_2d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rectilinear_mesh_2d.py <plot_rectilinear_mesh_2d.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
