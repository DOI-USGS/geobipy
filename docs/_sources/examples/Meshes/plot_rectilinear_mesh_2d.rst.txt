
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Meshes/plot_rectilinear_mesh_2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_2d.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Meshes_plot_rectilinear_mesh_2d.py:


2D Rectilinear Mesh
-------------------
This 2D rectilinear mesh defines a grid with straight cell boundaries.

It can be instantiated in two ways.

The first is by providing the cell centres or
cell edges in two dimensions.

The second embeds the 2D mesh in 3D by providing the cell centres or edges in three dimensions.
The first two dimensions specify the mesh coordinates in the horiztontal cartesian plane
while the third discretizes in depth. This allows us to characterize a mesh whose horizontal coordinates
do not follow a line that is parallel to either the "x" or "y" axis.

.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: Python

    import h5py
    from geobipy import StatArray
    from geobipy import RectilinearMesh1D, RectilinearMesh2D, RectilinearMesh3D
    import matplotlib.pyplot as plt
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 27-28

Specify some cell centres in x and y

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: Python

    x = StatArray(np.arange(10.0), 'Easting', 'm')
    y = StatArray(np.arange(20.0), 'Depth', 'm')
    rm = RectilinearMesh2D(x_centres=x, y_centres=y)








.. GENERATED FROM PYTHON SOURCE LINES 33-34

We can plot the grid lines of the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 34-45

.. code-block:: Python

    p=0;
    plt.figure(p)
    _  = rm.plot_grid(flipY=True, linewidth=0.5)

    # Intersecting multisegment lines with a mesh
    arr = np.zeros(rm.shape)
    i = rm.line_indices([0.0, 3.0, 6.0, 9], [2.0, 6.0, 0.0, 10])
    arr[i[:, 0], i[:, 1]] = 1
    p += 1; plt.figure(p)
    rm.pcolor(values = arr)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_001.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_002.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: xlabel='Easting (m)', ylabel='Depth (m)'>, <matplotlib.collections.QuadMesh object at 0x15e1d42c0>, <matplotlib.colorbar.Colorbar object at 0x15e1d5e80>)



.. GENERATED FROM PYTHON SOURCE LINES 46-47

We can pcolor the mesh by providing cell values.

.. GENERATED FROM PYTHON SOURCE LINES 47-58

.. code-block:: Python

    xx, yy = np.meshgrid(rm.y.centres, rm.x.centres)
    arr = StatArray(np.sin(np.sqrt(xx ** 2.0 + yy ** 2.0)), "Values")

    rm2, values2 = rm.resample(0.5, 0.5, arr, method='linear')


    p += 1; plt.figure(p)
    _ = rm.pcolor(arr, grid=True, flipY=True, linewidth=0.5)






.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_003.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0. 1. 2. ... 7. 8. 9.] [ 0.  1.  2. ... 17. 18. 19.]
    [-0.25  0.25  0.75 ...  8.25  8.75  9.25] [-0.25  0.25  0.75 ... 18.25 18.75 19.25]
    (10, 20)
    [[-0.25]
     [ 0.25]
     [ 0.75]
     ...
     [ 8.25]
     [ 8.75]
     [ 9.25]]
    (20, 1)
    [[-0.25  0.25  0.75 ... 18.25 18.75 19.25]]
    (1, 40)




.. GENERATED FROM PYTHON SOURCE LINES 59-60

Mask the x axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 60-64

.. code-block:: Python

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(x_distance=0.4, values=arr)
    p += 1; plt.figure(p)
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_004.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-66

Mask the z axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: Python

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(y_distance=0.2, values=arr)
    p += 1; plt.figure(p)
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_005.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-72

Mask axes by a distance

.. GENERATED FROM PYTHON SOURCE LINES 72-80

.. code-block:: Python

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(x_distance=0.4, y_distance=0.2, values=arr)
    p += 1; plt.figure(p)
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)

    x = StatArray(np.arange(10.0), 'Easting', 'm')
    y = StatArray(np.cumsum(np.arange(15.0)), 'Depth', 'm')
    rm = RectilinearMesh2D(x_centres=x, y_centres=y)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_006.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-83

We can perform some interval statistics on the cell values of the mesh
Generate some values

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python

    a = np.repeat(np.arange(1.0, np.float64(rm.x.nCells+1))[:, np.newaxis], rm.y.nCells, 1)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Compute the mean over an interval for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[6.8, 12.4], axis=0, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[9., 9., 9., ..., 9., 9., 9.]]), [6.8, 12.4])



.. GENERATED FROM PYTHON SOURCE LINES 90-91

Compute the mean over multiple intervals for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[6.8, 12.4, 20.0, 40.0], axis=0, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[ 9.,  9.,  9., ...,  9.,  9.,  9.],
           [nan, nan, nan, ..., nan, nan, nan],
           [nan, nan, nan, ..., nan, nan, nan]]), [6.8, 12.4, 20.0, 40.0])



.. GENERATED FROM PYTHON SOURCE LINES 94-95

We can specify either axis

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[2.8, 4.2], axis=1, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[ 1.],
           [ 2.],
           [ 3.],
           ...,
           [ 8.],
           [ 9.],
           [10.]]), [2.8, 4.2])



.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: Python

    rm.intervalStatistic(a, intervals=[2.8, 4.2, 5.1, 8.4], axis=1, statistic='mean')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([[ 1., nan,  1.],
           [ 2., nan,  2.],
           [ 3., nan,  3.],
           ...,
           [ 8., nan,  8.],
           [ 9., nan,  9.],
           [10., nan, 10.]]), [2.8, 4.2, 5.1, 8.4])



.. GENERATED FROM PYTHON SOURCE LINES 101-102

Slice the 2D mesh to retrieve either a 2D mesh or 1D mesh

.. GENERATED FROM PYTHON SOURCE LINES 102-114

.. code-block:: Python

    rm2 = rm[:5, :5]
    rm3 = rm[:5, 5]
    rm4 = rm[5, :5]

    p += 1; plt.figure(p)
    plt.subplot(131)
    rm2.plot_grid()
    plt.subplot(132)
    rm3.plot_grid()
    plt.subplot(133)
    rm4.plot_grid(transpose=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_007.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 115-116

Resample a grid

.. GENERATED FROM PYTHON SOURCE LINES 116-125

.. code-block:: Python

    values = StatArray(np.random.randn(*rm.shape))
    rm2, values2 = rm.resample(0.5, 0.5, values)

    p += 1; plt.figure(p)
    plt.subplot(121)
    rm.pcolor(values)
    plt.subplot(122)
    rm2.pcolor(values2)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_008.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0. 1. 2. ... 7. 8. 9.] [  0.   1.   3. ...  78.  91. 105.]
    [-0.25  0.25  0.75 ...  8.25  8.75  9.25] [ -0.25   0.25   0.75 ... 110.75 111.25 111.75]
    (10, 15)
    [[-0.25]
     [ 0.25]
     [ 0.75]
     ...
     [ 8.25]
     [ 8.75]
     [ 9.25]]
    (20, 1)
    [[ -0.25   0.25   0.75 ... 110.75 111.25 111.75]]
    (1, 225)

    (<Axes: >, <matplotlib.collections.QuadMesh object at 0x1483ecb60>, <matplotlib.colorbar.Colorbar object at 0x15d7cd340>)



.. GENERATED FROM PYTHON SOURCE LINES 126-128

Axes in log space
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 128-136

.. code-block:: Python

    x = StatArray(np.logspace(-1, 4, 10), 'x')
    y = StatArray(np.logspace(0, 3, 10), 'y')
    rm = RectilinearMesh2D(x_edges=x, x_log=10, y_edges=y, y_log=10)

    # We can plot the grid lines of the mesh.
    p += 1; plt.figure(p)
    _  = rm.plot_grid(linewidth=0.5)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_009.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 137-150

.. code-block:: Python

    with h5py.File('rm2d.h5', 'w') as f:
        rm.toHdf(f, 'test')

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'])

    arr = np.random.randn(*rm.shape)
    p += 1; plt.figure(p)
    plt.subplot(211)
    rm.pcolor(arr)
    plt.subplot(212)
    rm2.pcolor(arr)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_010.png
   :alt: plot rectilinear mesh 2d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Axes: xlabel='x', ylabel='y'>, <matplotlib.collections.QuadMesh object at 0x15df4ec90>, <matplotlib.colorbar.Colorbar object at 0x15dfe52e0>)



.. GENERATED FROM PYTHON SOURCE LINES 151-153

relative_to
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 153-211

.. code-block:: Python

    x = StatArray(np.arange(10.0), 'Northing', 'm')
    y = StatArray(np.arange(20.0), 'Depth', 'm')

    rm = RectilinearMesh2D(x_centres=x, y_centres=y)

    p += 1; plt.figure(p)
    plt.subplot(121)
    _  = rm.plot_grid(linewidth=0.5, flipY=True)
    rm = RectilinearMesh2D(x_centres=x, x_relative_to=0.2*np.random.randn(y.size), y_centres=y, y_relative_to=0.2*np.random.randn(x.size))
    plt.subplot(122)
    _  = rm.plot_grid(linewidth=0.5, flipY=True)

    # relative_to single
    with h5py.File('rm2d.h5', 'w') as f:
        rm.toHdf(f, 'test')

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'])

    arr = np.random.randn(*rm.shape)
    p += 1; plt.figure(p)
    plt.subplot(211)
    rm.pcolor(arr, flipY=True)
    plt.subplot(212)
    rm2.pcolor(arr, flipY=True)

    # relative_to expanded
    with h5py.File('rm2d.h5', 'w') as f:
        rm.createHdf(f, 'test', add_axis=RectilinearMesh1D(centres=StatArray(np.arange(3.0), name='Easting', units="m"), relative_to = 0.2*np.random.randn(x.size, y.size)))
        for i in range(3):
            rm.x.relative_to += 0.5
            rm.y.relative_to += 0.5
            rm.writeHdf(f, 'test', index=i)

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'], index=0)

    with h5py.File('rm2d.h5', 'r') as f:
        rm3 = RectilinearMesh3D.fromHdf(f['test'])

    p += 1; plt.figure(p)
    plt.subplot(311)
    rm.pcolor(arr, flipY=True)
    plt.subplot(312)
    rm2.pcolor(arr, flipY=True)

    p += 1; plt.figure(p)
    arr = np.random.randn(*rm3.shape)
    plt.subplot(311)
    mesh = rm3[0, :, :]
    mesh.pcolor(arr[0, :, :], flipY=True)
    plt.subplot(312)
    mesh = rm3[:, 0, :]
    mesh.pcolor(arr[:, 0, :], flipY=True)
    plt.subplot(313)
    rm3[:, :, 0].pcolor(arr[:, :, 0])

    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_011.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_012.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_013.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_014.png
         :alt: plot rectilinear mesh 2d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_014.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.321 seconds)


.. _sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_2d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rectilinear_mesh_2d.ipynb <plot_rectilinear_mesh_2d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rectilinear_mesh_2d.py <plot_rectilinear_mesh_2d.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rectilinear_mesh_2d.zip <plot_rectilinear_mesh_2d.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
