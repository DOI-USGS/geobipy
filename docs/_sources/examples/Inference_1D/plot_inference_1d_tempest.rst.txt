
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Inference_1D/plot_inference_1d_tempest.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Inference_1D_plot_inference_1d_tempest.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Inference_1D_plot_inference_1d_tempest.py:


Running GeoBIPy to invert Tempest data
++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 5-29

.. code-block:: Python


    import os
    import sys
    import pathlib
    from datetime import timedelta
    import time
    import numpy as np
    from geobipy import Inference3D
    from geobipy import user_parameters
    from geobipy import get_prng

    def checkCommandArguments():
        """Check the users command line arguments. """
        import argparse
        # warnings.filterwarnings('error')

        Parser = argparse.ArgumentParser(description="GeoBIPy",
                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        Parser.add_argument('--index', default=0, type=int, help='job array index 0-18')
        Parser.add_argument('--data', default=None, help="Data type. Choose from ['skytem_512', 'tempest', 'resolve']")
        Parser.add_argument('--model', default=None, help="Model type. Choose from ['glacial', 'saline_clay', 'resistive_dolomites', 'resistive_basement', 'coastal_salt_water', 'ice_over_salt_water']")

        return Parser.parse_args()








.. GENERATED FROM PYTHON SOURCE LINES 30-40

.. code-block:: Python

    np.random.seed(0)

    args = checkCommandArguments()
    sys.path.append(os.getcwd())

    models = ['glacial', 'saline_clay', 'resistive_dolomites', 'resistive_basement', 'coastal_salt_water', 'ice_over_salt_water']

    data_type = "Tempest"
    model_type = models[args.index]








.. GENERATED FROM PYTHON SOURCE LINES 41-43

The directory where HDF files will be stored
%%

.. GENERATED FROM PYTHON SOURCE LINES 43-91

.. code-block:: Python

    file_path = os.path.join(data_type, model_type)
    pathlib.Path(file_path).mkdir(parents=True, exist_ok=True)

    for filename in os.listdir(file_path):
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))

    output_directory = file_path

    data_filename = data_type + '_' + model_type

    supplementary = "..//..//supplementary//"

    parameter_file = supplementary + "//options_files//{}_options".format(data_type)
    inputFile = pathlib.Path(parameter_file)
    assert inputFile.exists(), Exception("Cannot find input file {}".format(inputFile))

    output_directory = pathlib.Path(output_directory)
    assert output_directory.exists(), Exception("Make sure the output directory exists {}".format(output_directory))

    print('Using user input file {}'.format(parameter_file))
    print('Output files will be produced at {}'.format(output_directory))

    kwargs = user_parameters.read(inputFile)

    kwargs['n_markov_chains'] = 5000

    kwargs['data_filename'] = supplementary + '//data//' + data_filename + '.csv'
    kwargs['system_filename'] = supplementary + "//data//" + kwargs['system_filename']

    # Everyone needs the system classes read in early.
    data = kwargs['data_type']._initialize_sequential_reading(kwargs['data_filename'], kwargs['system_filename'])

    # Start keeping track of time.
    t0 = time.time()

    seed = 146100583096709124601953385843316024947
    prng = get_prng(seed=seed)

    inference3d = Inference3D(data, prng=prng)
    inference3d.create_hdf5(directory=output_directory, **kwargs)

    print("Created hdf5 files in {} h:m:s".format(str(timedelta(seconds=time.time()-t0))))

    inference3d.infer(index=2, **kwargs)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Inference_1D/images/sphx_glr_plot_inference_1d_tempest_001.png
         :alt: plot inference 1d tempest
         :srcset: /examples/Inference_1D/images/sphx_glr_plot_inference_1d_tempest_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Inference_1D/images/sphx_glr_plot_inference_1d_tempest_002.png
         :alt: Fiducial [2.], Time Domain EM Data
         :srcset: /examples/Inference_1D/images/sphx_glr_plot_inference_1d_tempest_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using user input file ..//..//supplementary////options_files//Tempest_options
    Output files will be produced at Tempest/glacial
    Creating HDF5 files, this may take a few minutes...
    Files are being created for data files ..//..//supplementary////data//Tempest_glacial.csv and system files ..//..//supplementary////data//..//data/tempest.stm
    Created hdf5 file for line 0.0 with 79 data points
    Created hdf5 files 79 total data points
    Created hdf5 files in 0:00:00.270921 h:m:s
    i=5000, k=5, acc=*21.720, 0.013 s/Model, 66.800 s Elapsed, eta=--:--:-- h:m:s

    Remaining Points -2/1 || Elapsed Time: 0:01:07.758676 h:m:s || ETA 0:00:22.586225 h:m:s





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 8.394 seconds)


.. _sphx_glr_download_examples_Inference_1D_plot_inference_1d_tempest.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_inference_1d_tempest.ipynb <plot_inference_1d_tempest.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_inference_1d_tempest.py <plot_inference_1d_tempest.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
