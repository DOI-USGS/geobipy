"""
2D Posterior analysis of the Bayesian inference
-----------------------------------------------

All plotting in GeoBIPy can be carried out using the 3D inference class

"""
import argparse
import matplotlib.pyplot as plt
import numpy as np
from geobipy import Inference2D

#%%
def create_plots(data_type, model_type, fiducial):
    #%%
    # Inference for a line of inferences
    # ++++++++++++++++++++++++++++++++++
    #
    # We can instantiate the inference handler by providing a path to the directory containing
    # HDF5 files generated by GeoBIPy.
    #
    # The InfereceXD classes are low memory.  They only read information from the HDF5 files
    # as and when it is needed.
    #
    # The first time you use these classes to create plots, expect long initial processing times.
    # I precompute expensive properties and store them in the HDF5 files for later use.

    from numpy.random import Generator
    from numpy.random import PCG64DXSM
    generator = PCG64DXSM(seed=0)
    prng = Generator(generator)

    #%%
    results_2d = Inference2D.fromHdf('../parallel/{}/{}/0.0.h5'.format(data_type, model_type), prng=prng)

    fig = plt.figure(figsize=(12, 12))

    fig.suptitle("{} {}".format(data_type, model_type))

    #%%
    # Pull the McMC results for a single datapoint
    for i, fid in enumerate(fiducial):
        gs = fig.add_gridspec(2, 2)
        inference = results_2d.inference_1d(fiducial=fid)

        p = np.unravel_index(i, (2, 2))
        # fig, ax = inference._init_posterior_plots(gs=gs[p])
        inference.plot_posteriors(axes=gs[p])

    # plt.show(block=True)
    plt.savefig('{}_{}_points.png'.format(data_type, model_type), dpi=300)


if __name__ == '__main__':

    Parser = argparse.ArgumentParser(description="pulling 1D inferences",
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    Parser.add_argument('--data_type', dest='data_type', default=None, help='Skip the creation of the HDF5 files.  Only do this if you know they have been created.')
    Parser.add_argument('--model_type', dest='model_type', default=None, help='Specify a numpy seed file to fix the random number generator. Only used in serial mode.')
    Parser.add_argument('--fiducial', dest='fiducial', type=int, default=None, help='Invert this data point only. Only used in serial mode.')

    args = Parser.parse_args()

    data_types = ['resolve', 'skytem_304', 'skytem_512', ' tempest'] if args.data_type is None else args.data_type
    model_types = ['glacial', 'saline_clay', 'resistive_dolomites', 'resistive_basement', 'coastal_salt_water', 'ice_over_salt_water'] if args.model_type is None else args.model_type
    fiducial = np.arange(0, 109, 36, dtype=np.int32) if args.fiducial is None else args.fiducial

    if not isinstance(data_types, list): data_types = [data_types]
    if not isinstance(model_types, list): model_types = [model_types]

    for data in data_types:
        print(data)
        for model in model_types:
            print('   ',model)
            create_plots(data, model, fiducial)
