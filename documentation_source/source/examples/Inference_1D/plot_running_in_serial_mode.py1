"""
1D Inference of Resolve Data
----------------------------

All plotting in GeoBIPy can be carried out using the 3D inference class

"""
from geobipy import StatArray
import time
from geobipy import get_prng

def run_geobipy_in_serial(data_type, model_type, output_directory):

    import pathlib
    from datetime import timedelta

    data_filename = data_type + '_' + model_type

    parameter_file = "../parallel_inference/{}_options".format(data_type)
    inputFile = pathlib.Path(parameter_file)
    assert inputFile.exists(), Exception("Cannot find input file {}".format(inputFile))

    output_directory = pathlib.Path(output_directory)
    assert output_directory.exists(), Exception("Make sure the output directory exists {}".format(output_directory))

    print('Using user input file {}'.format(parameter_file))
    print('Output files will be produced at {}'.format(output_directory))

    kwargs = user_parameters.read(inputFile)

    kwargs['n_markov_chains'] = 5000

    kwargs['data_filename'] = kwargs['data_filename'] + '//' + data_filename + '.csv'

    # Everyone needs the system classes read in early.
    data = kwargs['data_type']._initialize_sequential_reading(kwargs['data_filename'], kwargs['system_filename'])

    # Start keeping track of time.
    t0 = time.time()

    seed = 146100583096709124601953385843316024947
    prng = get_prng(seed=seed)

    print(prng.random())

    inference3d = Inference3D(data, prng=prng)
    inference3d.create_hdf5(directory=output_directory, **kwargs)

    print("Created hdf5 files in {} h:m:s".format(str(timedelta(seconds=time.time()-t0))))

    inference3d.infer(index=2, **kwargs)


def checkCommandArguments():
    """Check the users command line arguments. """
    import warnings
    import argparse
    # warnings.filterwarnings('error')

    Parser = argparse.ArgumentParser(description="GeoBIPy",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    Parser.add_argument('--index', default=None, type=int, help='job array index 0-18')
    Parser.add_argument('--data', default=None, help="Data type. Choose from ['skytem_512', 'tempest', 'resolve']")
    Parser.add_argument('--model', default=None, help="Model type. Choose from ['glacial', 'saline_clay', 'resistive_dolomites', 'resistive_basement', 'coastal_salt_water', 'ice_over_salt_water']")

    return Parser.parse_args()

if __name__ == '__main__':
    import os
    import sys
    from pathlib import Path
    from geobipy import Inference3D
    from geobipy import user_parameters
    import numpy as np

    #%%
    # Running GeoBIPy to invert data
    # ++++++++++++++++++++++++++++++
    #
    # Define some directories and paths

    np.random.seed(0)

    args = checkCommandArguments()
    sys.path.append(os.getcwd())

    datas = ['tempest', 'skytem_512', 'resolve']
    models = ['glacial', 'saline_clay', 'resistive_dolomites', 'resistive_basement', 'coastal_salt_water', 'ice_over_salt_water']

    if args.index is not None:
        tmp = np.unravel_index(args.index, (len(datas), len(models)))
    else:
        tmp = [0, 0]

    data = datas[tmp[0]]
    model = models[tmp[1]]

    #%%
    # The directory where HDF files will be stored
    #%%
    file_path = os.path.join(data, model)
    Path(file_path).mkdir(parents=True, exist_ok=True)

    for filename in os.listdir(file_path):
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))

    run_geobipy_in_serial(data, model, file_path)
