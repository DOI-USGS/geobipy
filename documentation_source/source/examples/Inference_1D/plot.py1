from os.path import join, splitext
import argparse
import matplotlib.pyplot as plt
import numpy as np
from geobipy import Inference2D, get_prng

#%%
# Inference for a line of inferences
# ++++++++++++++++++++++++++++++++++
#
# We can instantiate the inference handler by providing a path to the directory containing
# HDF5 files generated by GeoBIPy.
#
# The InfereceXD classes are low memory.  They only read information from the HDF5 files
# as and when it is needed.
#
# The first time you use these classes to create plots, expect long initial processing times.
# I precompute expensive properties and store them in the HDF5 files for later use.

Parser = argparse.ArgumentParser(description="GeoBIPy", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
Parser.add_argument('line_file', help='HDF5 of a line file')
Parser.add_argument('--output_file', default=None, help='Output image name')

args = Parser.parse_args()

line_file, file_extension = splitext(args.line_file)

if args.output_file is None:
    args.output_file = line_file + ".png"

################################################################################
# Before we start plotting cross sections, lets set some common keywords
kwargs = {
         #   "reciprocateParameter" : True, # Plot resistivity instead?
        #  "vmin" : np.log10(1.0/100), # Set the minimum colour bar range in log space
        #  "vmax" : np.log10(1), # Set the maximum colour bar range in log space
         "log" : 10, # I want to plot the log conductivity
      #    "equalize" : True
        # "cmap" : 'gist_ncar',
         "cmap" : 'jet',
         "x":'y',
         'flipX':True,
         }

################################################################################
results_2d = Inference2D.fromHdf(args.line_file, mode='r+', prng=get_prng())

results_2d.compute_mean_parameter()

# p = results_2d.inference_1d(index=0)

# p.plot_posteriors()

# plt.show()

# input('fdsfs')


# fig = results_2d.plot_summary(**kwargs)

# plt.show()
# fig.savefig(args.output_file)

plt.figure(figsize=(16, 2))
results_2d.plot_mean_model(**kwargs);
results_2d.plot_data_elevation(linewidth=0.3, x = kwargs['x']);
results_2d.plot_elevation(linewidth=0.3, x = kwargs['x']);
# plt.ylim([-150, 150])
plt.savefig('mean_model_only.png', dpi=300)