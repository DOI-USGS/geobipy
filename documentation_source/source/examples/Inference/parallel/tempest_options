from os.path import join
import numpy as np
# -------------------------------------------------------
# General file structure information.
# -------------------------------------------------------
# Data folder
data_directory = "..//..//supplementary//data"
# The data_filename and system_filename options are single strings for single system dataset,
# or a list of str for multi-system datasets like Skytem.
# Data File Name.
data_filename = data_directory
# System File Name.
system_filename = join(data_directory,'Tempest.stm')

# Define the data type to invert
data_type = TempestData

# Maximum number of Markov Chains per data point.
n_markov_chains = 100000

# -------------------------------------------------------
# General GeoBIPy options.
# -------------------------------------------------------
# Interactively plot a single data point as it progresses
interactive_plot = False
# How often to update the plot. (lower is slower)
update_plot_every = 5000
# Save a PNG of the final results for each data point.
save_png = False
# Save the results of the McMC inversion to HDF5 files. (Generally always True)
save_hdf5 = True


# -------------------------------------------------------
# Data prior details
# -------------------------------------------------------
# The data priors are imposed on three different aspects of the data.
# The relative and additive error and the elevation of the data point.
# Data uncertainty priors are used if solveRelativeError or solveAdditiveError are True.
# If the data file contains columns of the estimated standard deviations, they are used as the initial values
# when starting an McMC inversion. If the file does not contain these estimates, then the initial
# standard deviations are calculated using sqrt((relative * data)^2 + (additive)^2).

# If there are multiple systems (e.g. Skytem, usually low and high moment, and hence 2 systems)
# the relative and additive values below should have enough values to match the number of systems.
# e.g. for Skytem, the initial_relative_error might = [0.03, 0.03],
# -------------------------------------------------------
# Data proposal distributions
# -------------------------------------------------------
# The relative, additive, and elevation proposal variances are assigned to
# normal distributions with a mean equal to its value in the current model (of the Markov chain)
# These variances are used when we randomly choose a new value for that given variable.
# -------------------------------------------------------
# Use the prior on the relative data errors
solve_relative_error = True
# Assign an initial percentage relative Error
# If the file contains no standard deviations, this will be used
# to assign the initial data uncertainties.
initial_relative_error = [0.04, 0.04]
## Relative Error Prior Details
# Distribution('Uniform', min=[0.01, 0.01], max=[0.5, 0.5])
# Minimum Relative Error
minimum_relative_error = [0.00001, 0.00001]
# Maximum Relative Error
maximum_relative_error = [0.5, 0.5]
## Proposal variance for the relative error
# Distribution('Normal', mean=[0.0, 0.0], variance=[2.5e-7, 2.5e-7])
relative_error_proposal_variance = [2.5e-4, 2.5e-4]
# -------------------------------------------------------
# -------------------------------------------------------
# Use the prior on the additive data errors
solve_additive_error = True
# Assign an initial additive error level.
# If the file contains no standard deviations, this will be used
# to assign the initial data uncertainties.
initial_additive_error = np.r_[0.011474, 0.012810, 0.008507, 0.005154, 0.004742, 0.004477, 0.004168, 0.003539, 0.003352, 0.003213, 0.003161, 0.003122, 0.002587, 0.002038, 0.002201,
                               0.007383, 0.005693, 0.005178, 0.003659, 0.003426, 0.003046, 0.003095, 0.003247, 0.002775, 0.002627, 0.002460, 0.002178, 0.001754, 0.001405, 0.001283]
# # Additive Error Prior Details
# # Distribution('Uniform', min=1.0, max=3.0)
# # Minimum Additive Error
# minimum_additive_error = np.full(30, fill_value=0.0001)
# # Maximum Relative Error
# maximum_additive_error = np.full(30, fill_value=1000.0)
# Proposal variance for the additive error
# Distribution('Normal', mean=VALUE, variance=0.0025)
additive_error_proposal_variance = 1e-2

# Additive Error Prior Details
# Distribution('Uniform', min=1.0, max=3.0)
# Minimum Additive Error
minimum_additive_error = np.r_[0.001, 0.001]
# Maximum Relative Error
maximum_additive_error = np.r_[100.0, 100.0]
# -------------------------------------------------------
# -------------------------------------------------------
# Transmitter loop parameters.
# Add entries for "transmitter_{x, y, z, pitch, roll, yaw}"
solve_transmitter_x = False
# Distribution('Uniform', min=VALUE-change, max=VALUE+change)
maximum_transmitter_x_change = 5.0 # meters
# Distribution('Normal', mean=VALUE, variance=0.0001)
transmitter_x_proposal_variance = 0.01

solve_transmitter_z = False
# Distribution('Uniform', min=VALUE-change, max=VALUE+change)
maximum_transmitter_z_change = 5.0 # meters
# Distribution('Normal', mean=VALUE, variance=0.0001)
transmitter_z_proposal_variance = 0.01

solve_transmitter_pitch = False
# Distribution('Uniform', min=VALUE-change, max=VALUE+change)
maximum_transmitter_pitch_change = 5.0 # degrees
# Distribution('Normal', mean=VALUE, variance=0.0001)
transmitter_pitch_proposal_variance = 0.01

# -------------------------------------------------------
# -------------------------------------------------------
# Receiver loop parameters.
# Add entries for "receiver_{x, y, z, pitch, roll, yaw}"
solve_receiver_x = True
# Distribution('Uniform', min=VALUE-change, max=VALUE+change)
maximum_receiver_x_change = 5.0 # meters
# Distribution('Normal', mean=VALUE, variance=0.0001)
receiver_x_proposal_variance = 0.025

solve_receiver_z = True
# Distribution('Uniform', min=VALUE-change, max=VALUE+change)
maximum_receiver_z_change = 5.0 # meters
# Distribution('Normal', mean=VALUE, variance=0.0001)
receiver_z_proposal_variance = 0.025

solve_receiver_pitch = True
# Distribution('Uniform', min=VALUE-change, max=VALUE+change)
maximum_receiver_pitch_change = 5.0 # degrees
# Distribution('Normal', mean=VALUE, variance=0.0001)
receiver_pitch_proposal_variance = 0.01
# -------------------------------------------------------
# -------------------------------------------------------

# -------------------------------------------------------
# Data type specific solving.
# -------------------------------------------------------
# Resolve calibration parameters
solve_calibration = False

# -------------------------------------------------------
# Earth model variables
# -------------------------------------------------------
# solve_parameter will prevent parameters from exploding to very large or very small numbers.
# solve_gradient prevents large changes in parameter values from layer to layer from occurring.
# If both of these are active, the recovered earth models generally contain
# less layers due to an implicit constraint in a multivariate normal distribution.
# If you feel that your recovered models are too conservative, try turning one of these off.
# It is highly recommended to have at least one of these options turned on!
# Use a prior on the parameter magnitude.
solve_parameter = False
# Use the Prior on the difference in log parameter diff(log(X))
solve_gradient = True

# Maximum number of layers in the 1D model
maximum_number_of_layers = 30
# depth_prior = Distribution('Uniform', min=1.0, max=350.0)
# Minimum layer depth in metres
minimum_depth = 1.0
# Maximum layer depth in metres
maximum_depth = 550.0
# Minimum layer thickness.
# If minimumThickness: None, it will be autocalculated.
minimum_thickness = None

# Evolution Probabilities for earth model manipulation during the Markov chain.
# These four values are internally scaled such that their sum is 1.0.
# Probability that a layer is inserted into the model.
probability_of_birth = 1.0/6.0
# Probablitiy that a layer is removed from the model.
probability_of_death = 1.0/6.0
# Probability that an interface in the model is perturbed.
probability_of_perturb = 1.0/6.0
# Probability of no change occuring to the layers of the model.
probability_of_no_change = 0.5

# -------------------------------------------------------
# Typically Defaulted parameters
# -------------------------------------------------------
# Standard Deviation of log(rho): log(1 + factor)
# Default is 10.0
factor = None
# Standard Deviation for the difference in layer resistivity
# Default is 1.5
gradient_standard_deviation = None
# Initial scaling factor for proposal covariance
covariance_scaling = None
# Scaling factor for data misfit
multiplier = None
# Clipping Ratio for interface contrasts
clip_ratio = None
# Only sample the prior
ignore_likelihood = False

# Impose bounds on the parameter value
# None, or a length 2 list i.e. [a, b]
parameter_limits = None

# Display the resistivity?
reciprocate_parameters = True

verbose = False
